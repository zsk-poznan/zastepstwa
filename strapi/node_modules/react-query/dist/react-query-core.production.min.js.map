{"version":3,"file":"react-query-core.production.min.js","sources":["../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","../src/core/subscribable.ts","../node_modules/@babel/runtime/helpers/esm/extends.js","../src/core/utils.ts","../src/core/focusManager.ts","../src/core/onlineManager.ts","../src/core/retryer.ts","../src/core/notifyManager.ts","../src/core/logger.ts","../src/core/query.ts","../src/core/queryCache.ts","../src/core/mutation.ts","../src/core/mutationCache.ts","../src/core/infiniteQueryBehavior.ts","../src/core/queryClient.ts","../src/core/queryObserver.ts","../src/core/queriesObserver.ts","../src/core/infiniteQueryObserver.ts","../src/core/mutationObserver.ts","../src/core/hydration.ts"],"sourcesContent":["export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","type Listener = () => void\n\nexport class Subscribable<TListener extends Function = Listener> {\n  protected listeners: TListener[]\n\n  constructor() {\n    this.listeners = []\n  }\n\n  subscribe(listener?: TListener): () => void {\n    const callback = listener || (() => undefined)\n\n    this.listeners.push(callback as TListener)\n\n    this.onSubscribe()\n\n    return () => {\n      this.listeners = this.listeners.filter(x => x !== callback)\n      this.onUnsubscribe()\n    }\n  }\n\n  hasListeners(): boolean {\n    return this.listeners.length > 0\n  }\n\n  protected onSubscribe(): void {\n    // Do nothing\n  }\n\n  protected onUnsubscribe(): void {\n    // Do nothing\n  }\n}\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import type { Mutation } from './mutation'\nimport type { Query } from './query'\nimport { EnsuredQueryKey } from './types'\nimport type {\n  MutationFunction,\n  MutationKey,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryOptions,\n} from './types'\n\n// TYPES\n\nexport interface QueryFilters {\n  /**\n   * Include or exclude active queries\n   */\n  active?: boolean\n  /**\n   * Match query key exactly\n   */\n  exact?: boolean\n  /**\n   * Include or exclude inactive queries\n   */\n  inactive?: boolean\n  /**\n   * Include queries matching this predicate function\n   */\n  predicate?: (query: Query) => boolean\n  /**\n   * Include queries matching this query key\n   */\n  queryKey?: QueryKey\n  /**\n   * Include or exclude stale queries\n   */\n  stale?: boolean\n  /**\n   * Include or exclude fetching queries\n   */\n  fetching?: boolean\n}\n\nexport interface MutationFilters {\n  /**\n   * Match mutation key exactly\n   */\n  exact?: boolean\n  /**\n   * Include mutations matching this predicate function\n   */\n  predicate?: (mutation: Mutation<any, any, any>) => boolean\n  /**\n   * Include mutations matching this mutation key\n   */\n  mutationKey?: MutationKey\n  /**\n   * Include or exclude fetching mutations\n   */\n  fetching?: boolean\n}\n\nexport type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput\n\nexport type Updater<TInput, TOutput> =\n  | TOutput\n  | DataUpdateFunction<TInput, TOutput>\n\nexport type QueryStatusFilter = 'all' | 'active' | 'inactive' | 'none'\n\n// UTILS\n\nexport const isServer = typeof window === 'undefined'\n\nexport function noop(): undefined {\n  return undefined\n}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<TInput, TOutput>)(input)\n    : updater\n}\n\nexport function isValidTimeout(value: any): value is number {\n  return typeof value === 'number' && value >= 0 && value !== Infinity\n}\n\nexport function ensureQueryKeyArray<T extends QueryKey>(\n  value: T\n): EnsuredQueryKey<T> {\n  return (Array.isArray(value)\n    ? value\n    : ([value] as unknown)) as EnsuredQueryKey<T>\n}\n\nexport function difference<T>(array1: T[], array2: T[]): T[] {\n  return array1.filter(x => array2.indexOf(x) === -1)\n}\n\nexport function replaceAt<T>(array: T[], index: number, value: T): T[] {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\nexport function timeUntilStale(updatedAt: number, staleTime?: number): number {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0)\n}\n\nexport function parseQueryArgs<\n  TOptions extends QueryOptions<any, any, any, TQueryKey>,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  arg1: TQueryKey | TOptions,\n  arg2?: QueryFunction<any, TQueryKey> | TOptions,\n  arg3?: TOptions\n): TOptions {\n  if (!isQueryKey(arg1)) {\n    return arg1 as TOptions\n  }\n\n  if (typeof arg2 === 'function') {\n    return { ...arg3, queryKey: arg1, queryFn: arg2 } as TOptions\n  }\n\n  return { ...arg2, queryKey: arg1 } as TOptions\n}\n\nexport function parseMutationArgs<\n  TOptions extends MutationOptions<any, any, any, any>\n>(\n  arg1: MutationKey | MutationFunction<any, any> | TOptions,\n  arg2?: MutationFunction<any, any> | TOptions,\n  arg3?: TOptions\n): TOptions {\n  if (isQueryKey(arg1)) {\n    if (typeof arg2 === 'function') {\n      return { ...arg3, mutationKey: arg1, mutationFn: arg2 } as TOptions\n    }\n    return { ...arg2, mutationKey: arg1 } as TOptions\n  }\n\n  if (typeof arg1 === 'function') {\n    return { ...arg2, mutationFn: arg1 } as TOptions\n  }\n\n  return { ...arg1 } as TOptions\n}\n\nexport function parseFilterArgs<\n  TFilters extends QueryFilters,\n  TOptions = unknown\n>(\n  arg1?: QueryKey | TFilters,\n  arg2?: TFilters | TOptions,\n  arg3?: TOptions\n): [TFilters, TOptions | undefined] {\n  return (isQueryKey(arg1)\n    ? [{ ...arg2, queryKey: arg1 }, arg3]\n    : [arg1 || {}, arg2]) as [TFilters, TOptions]\n}\n\nexport function parseMutationFilterArgs(\n  arg1?: QueryKey | MutationFilters,\n  arg2?: MutationFilters\n): MutationFilters | undefined {\n  return isQueryKey(arg1) ? { ...arg2, mutationKey: arg1 } : arg1\n}\n\nexport function mapQueryStatusFilter(\n  active?: boolean,\n  inactive?: boolean\n): QueryStatusFilter {\n  if (\n    (active === true && inactive === true) ||\n    (active == null && inactive == null)\n  ) {\n    return 'all'\n  } else if (active === false && inactive === false) {\n    return 'none'\n  } else {\n    // At this point, active|inactive can only be true|false or false|true\n    // so, when only one value is provided, the missing one has to be the negated value\n    const isActive = active ?? !inactive\n    return isActive ? 'active' : 'inactive'\n  }\n}\n\nexport function matchQuery(\n  filters: QueryFilters,\n  query: Query<any, any, any, any>\n): boolean {\n  const {\n    active,\n    exact,\n    fetching,\n    inactive,\n    predicate,\n    queryKey,\n    stale,\n  } = filters\n\n  if (isQueryKey(queryKey)) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false\n    }\n  }\n\n  const queryStatusFilter = mapQueryStatusFilter(active, inactive)\n\n  if (queryStatusFilter === 'none') {\n    return false\n  } else if (queryStatusFilter !== 'all') {\n    const isActive = query.isActive()\n    if (queryStatusFilter === 'active' && !isActive) {\n      return false\n    }\n    if (queryStatusFilter === 'inactive' && isActive) {\n      return false\n    }\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false\n  }\n\n  if (typeof fetching === 'boolean' && query.isFetching() !== fetching) {\n    return false\n  }\n\n  if (predicate && !predicate(query)) {\n    return false\n  }\n\n  return true\n}\n\nexport function matchMutation(\n  filters: MutationFilters,\n  mutation: Mutation<any, any>\n): boolean {\n  const { exact, fetching, predicate, mutationKey } = filters\n  if (isQueryKey(mutationKey)) {\n    if (!mutation.options.mutationKey) {\n      return false\n    }\n    if (exact) {\n      if (\n        hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)\n      ) {\n        return false\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false\n    }\n  }\n\n  if (\n    typeof fetching === 'boolean' &&\n    (mutation.state.status === 'loading') !== fetching\n  ) {\n    return false\n  }\n\n  if (predicate && !predicate(mutation)) {\n    return false\n  }\n\n  return true\n}\n\nexport function hashQueryKeyByOptions<TQueryKey extends QueryKey = QueryKey>(\n  queryKey: TQueryKey,\n  options?: QueryOptions<any, any, any, TQueryKey>\n): string {\n  const hashFn = options?.queryKeyHashFn || hashQueryKey\n  return hashFn(queryKey)\n}\n\n/**\n * Default query keys hash function.\n */\nexport function hashQueryKey(queryKey: QueryKey): string {\n  const asArray = ensureQueryKeyArray(queryKey)\n  return stableValueHash(asArray)\n}\n\n/**\n * Hashes the value into a stable hash.\n */\nexport function stableValueHash(value: any): string {\n  return JSON.stringify(value, (_, val) =>\n    isPlainObject(val)\n      ? Object.keys(val)\n          .sort()\n          .reduce((result, key) => {\n            result[key] = val[key]\n            return result\n          }, {} as any)\n      : val\n  )\n}\n\n/**\n * Checks if key `b` partially matches with key `a`.\n */\nexport function partialMatchKey(a: QueryKey, b: QueryKey): boolean {\n  return partialDeepEqual(ensureQueryKeyArray(a), ensureQueryKeyArray(b))\n}\n\n/**\n * Checks if `b` partially matches with `a`.\n */\nexport function partialDeepEqual(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return !Object.keys(b).some(key => !partialDeepEqual(a[key], b[key]))\n  }\n\n  return false\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = Array.isArray(a) && Array.isArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aSize = array ? a.length : Object.keys(a).length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      copy[key] = replaceEqualDeep(a[key], b[key])\n      if (copy[key] === a[key]) {\n        equalItems++\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\n/**\n * Shallow compare objects. Only works with objects that always have the same properties.\n */\nexport function shallowEqualObjects<T>(a: T, b: T): boolean {\n  if ((a && !b) || (b && !a)) {\n    return false\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nexport function isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function isQueryKey(value: any): value is QueryKey {\n  return typeof value === 'string' || Array.isArray(value)\n}\n\nexport function isError(value: any): value is Error {\n  return value instanceof Error\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout)\n  })\n}\n\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\nexport function scheduleMicrotask(callback: () => void): void {\n  Promise.resolve()\n    .then(callback)\n    .catch(error =>\n      setTimeout(() => {\n        throw error\n      })\n    )\n}\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\nclass FocusManager extends Subscribable {\n  private focused?: boolean\n  private removeEventListener?: () => void\n\n  protected onSubscribe(): void {\n    if (!this.removeEventListener) {\n      this.setDefaultEventListener()\n    }\n  }\n\n  setEventListener(\n    setup: (setFocused: (focused?: boolean) => void) => () => void\n  ): void {\n    if (this.removeEventListener) {\n      this.removeEventListener()\n    }\n    this.removeEventListener = setup(focused => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused)\n      } else {\n        this.onFocus()\n      }\n    })\n  }\n\n  setFocused(focused?: boolean): void {\n    this.focused = focused\n\n    if (focused) {\n      this.onFocus()\n    }\n  }\n\n  onFocus(): void {\n    this.listeners.forEach(listener => {\n      listener()\n    })\n  }\n\n  isFocused(): boolean {\n    if (typeof this.focused === 'boolean') {\n      return this.focused\n    }\n\n    // document global can be unavailable in react native\n    if (typeof document === 'undefined') {\n      return true\n    }\n\n    return [undefined, 'visible', 'prerender'].includes(\n      document.visibilityState\n    )\n  }\n\n  private setDefaultEventListener() {\n    if (!isServer && window?.addEventListener) {\n      this.setEventListener(onFocus => {\n        const listener = () => onFocus()\n        // Listen to visibillitychange and focus\n        window.addEventListener('visibilitychange', listener, false)\n        window.addEventListener('focus', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener)\n          window.removeEventListener('focus', listener)\n        }\n      })\n    }\n  }\n}\n\nexport const focusManager = new FocusManager()\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\nclass OnlineManager extends Subscribable {\n  private online?: boolean\n  private removeEventListener?: () => void\n\n  protected onSubscribe(): void {\n    if (!this.removeEventListener) {\n      this.setDefaultEventListener()\n    }\n  }\n\n  setEventListener(\n    setup: (setOnline: (online?: boolean) => void) => () => void\n  ): void {\n    if (this.removeEventListener) {\n      this.removeEventListener()\n    }\n    this.removeEventListener = setup((online?: boolean) => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online)\n      } else {\n        this.onOnline()\n      }\n    })\n  }\n\n  setOnline(online?: boolean): void {\n    this.online = online\n\n    if (online) {\n      this.onOnline()\n    }\n  }\n\n  onOnline(): void {\n    this.listeners.forEach(listener => {\n      listener()\n    })\n  }\n\n  isOnline(): boolean {\n    if (typeof this.online === 'boolean') {\n      return this.online\n    }\n\n    if (\n      typeof navigator === 'undefined' ||\n      typeof navigator.onLine === 'undefined'\n    ) {\n      return true\n    }\n\n    return navigator.onLine\n  }\n\n  private setDefaultEventListener() {\n    if (!isServer && window?.addEventListener) {\n      this.setEventListener(onOnline => {\n        const listener = () => onOnline()\n        // Listen to online\n        window.addEventListener('online', listener, false)\n        window.addEventListener('offline', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', listener)\n          window.removeEventListener('offline', listener)\n        }\n      })\n    }\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n","import { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { sleep } from './utils'\n\n// TYPES\n\ninterface RetryerConfig<TData = unknown, TError = unknown> {\n  fn: () => TData | Promise<TData>\n  onError?: (error: TError) => void\n  onSuccess?: (data: TData) => void\n  onFail?: (failureCount: number, error: TError) => void\n  onPause?: () => void\n  onContinue?: () => void\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue<TError>\n}\n\nexport type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>\n\ntype ShouldRetryFunction<TError = unknown> = (\n  failureCount: number,\n  error: TError\n) => boolean\n\nexport type RetryDelayValue<TError> = number | RetryDelayFunction<TError>\n\ntype RetryDelayFunction<TError = unknown> = (\n  failureCount: number,\n  error: TError\n) => number\n\nfunction defaultRetryDelay(failureCount: number) {\n  return Math.min(1000 * 2 ** failureCount, 30000)\n}\n\ninterface Cancelable {\n  cancel(): void\n}\n\nexport function isCancelable(value: any): value is Cancelable {\n  return typeof value?.cancel === 'function'\n}\n\nexport interface CancelOptions {\n  revert?: boolean\n  silent?: boolean\n}\n\nexport class CancelledError {\n  revert?: boolean\n  silent?: boolean\n  constructor(options?: CancelOptions) {\n    this.revert = options?.revert\n    this.silent = options?.silent\n  }\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\n// CLASS\n\nexport class Retryer<TData = unknown, TError = unknown> {\n  cancel: (options?: CancelOptions) => void\n  cancelRetry: () => void\n  continue: () => void\n  failureCount: number\n  isPaused: boolean\n  isResolved: boolean\n  isTransportCancelable: boolean\n  promise: Promise<TData>\n\n  constructor(config: RetryerConfig<TData, TError>) {\n    let cancelRetry = false\n    let cancelFn: ((options?: CancelOptions) => void) | undefined\n    let continueFn: ((value?: unknown) => void) | undefined\n    let promiseResolve: (data: TData) => void\n    let promiseReject: (error: TError) => void\n\n    this.cancel = cancelOptions => cancelFn?.(cancelOptions)\n    this.cancelRetry = () => {\n      cancelRetry = true\n    }\n    this.continue = () => continueFn?.()\n    this.failureCount = 0\n    this.isPaused = false\n    this.isResolved = false\n    this.isTransportCancelable = false\n    this.promise = new Promise<TData>((outerResolve, outerReject) => {\n      promiseResolve = outerResolve\n      promiseReject = outerReject\n    })\n\n    const resolve = (value: any) => {\n      if (!this.isResolved) {\n        this.isResolved = true\n        config.onSuccess?.(value)\n        continueFn?.()\n        promiseResolve(value)\n      }\n    }\n\n    const reject = (value: any) => {\n      if (!this.isResolved) {\n        this.isResolved = true\n        config.onError?.(value)\n        continueFn?.()\n        promiseReject(value)\n      }\n    }\n\n    const pause = () => {\n      return new Promise(continueResolve => {\n        continueFn = continueResolve\n        this.isPaused = true\n        config.onPause?.()\n      }).then(() => {\n        continueFn = undefined\n        this.isPaused = false\n        config.onContinue?.()\n      })\n    }\n\n    // Create loop function\n    const run = () => {\n      // Do nothing if already resolved\n      if (this.isResolved) {\n        return\n      }\n\n      let promiseOrValue: any\n\n      // Execute query\n      try {\n        promiseOrValue = config.fn()\n      } catch (error) {\n        promiseOrValue = Promise.reject(error)\n      }\n\n      // Create callback to cancel this fetch\n      cancelFn = cancelOptions => {\n        if (!this.isResolved) {\n          reject(new CancelledError(cancelOptions))\n\n          // Cancel transport if supported\n          if (isCancelable(promiseOrValue)) {\n            try {\n              promiseOrValue.cancel()\n            } catch {}\n          }\n        }\n      }\n\n      // Check if the transport layer support cancellation\n      this.isTransportCancelable = isCancelable(promiseOrValue)\n\n      Promise.resolve(promiseOrValue)\n        .then(resolve)\n        .catch(error => {\n          // Stop if the fetch is already resolved\n          if (this.isResolved) {\n            return\n          }\n\n          // Do we need to retry the request?\n          const retry = config.retry ?? 3\n          const retryDelay = config.retryDelay ?? defaultRetryDelay\n          const delay =\n            typeof retryDelay === 'function'\n              ? retryDelay(this.failureCount, error)\n              : retryDelay\n          const shouldRetry =\n            retry === true ||\n            (typeof retry === 'number' && this.failureCount < retry) ||\n            (typeof retry === 'function' && retry(this.failureCount, error))\n\n          if (cancelRetry || !shouldRetry) {\n            // We are done if the query does not need to be retried\n            reject(error)\n            return\n          }\n\n          this.failureCount++\n\n          // Notify on fail\n          config.onFail?.(this.failureCount, error)\n\n          // Delay\n          sleep(delay)\n            // Pause if the document is not visible or when the device is offline\n            .then(() => {\n              if (!focusManager.isFocused() || !onlineManager.isOnline()) {\n                return pause()\n              }\n            })\n            .then(() => {\n              if (cancelRetry) {\n                reject(error)\n              } else {\n                run()\n              }\n            })\n        })\n    }\n\n    // Start loop\n    run()\n  }\n}\n","import { scheduleMicrotask } from './utils'\n\n// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\n// CLASS\n\nclass NotifyManager {\n  private queue: NotifyCallback[]\n  private transactions: number\n  private notifyFn: NotifyFunction\n  private batchNotifyFn: BatchNotifyFunction\n\n  constructor() {\n    this.queue = []\n    this.transactions = 0\n\n    this.notifyFn = (callback: () => void) => {\n      callback()\n    }\n\n    this.batchNotifyFn = (callback: () => void) => {\n      callback()\n    }\n  }\n\n  batch<T>(callback: () => T): T {\n    this.transactions++\n    const result = callback()\n    this.transactions--\n    if (!this.transactions) {\n      this.flush()\n    }\n    return result\n  }\n\n  schedule(callback: NotifyCallback): void {\n    if (this.transactions) {\n      this.queue.push(callback)\n    } else {\n      scheduleMicrotask(() => {\n        this.notifyFn(callback)\n      })\n    }\n  }\n\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n  batchCalls<T extends Function>(callback: T): T {\n    return ((...args: any[]) => {\n      this.schedule(() => {\n        callback(...args)\n      })\n    }) as any\n  }\n\n  flush(): void {\n    const queue = this.queue\n    this.queue = []\n    if (queue.length) {\n      scheduleMicrotask(() => {\n        this.batchNotifyFn(() => {\n          queue.forEach(callback => {\n            this.notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n  setNotifyFunction(fn: NotifyFunction) {\n    this.notifyFn = fn\n  }\n\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n  setBatchNotifyFunction(fn: BatchNotifyFunction) {\n    this.batchNotifyFn = fn\n  }\n}\n\n// SINGLETON\n\nexport const notifyManager = new NotifyManager()\n","import { noop } from './utils'\n\n// TYPES\n\nexport interface Logger {\n  log: LogFunction\n  warn: LogFunction\n  error: LogFunction\n}\n\ntype LogFunction = (...args: any[]) => void\n\n// FUNCTIONS\n\nlet logger: Logger = console || {\n  error: noop,\n  warn: noop,\n  log: noop,\n}\n\nexport function getLogger(): Logger {\n  return logger\n}\n\nexport function setLogger(newLogger: Logger) {\n  logger = newLogger\n}\n","import {\n  Updater,\n  functionalUpdate,\n  isValidTimeout,\n  noop,\n  replaceEqualDeep,\n  timeUntilStale,\n  ensureQueryKeyArray,\n} from './utils'\nimport type {\n  InitialDataFunction,\n  QueryKey,\n  QueryOptions,\n  QueryStatus,\n  QueryFunctionContext,\n  EnsuredQueryKey,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport type { QueryObserver } from './queryObserver'\nimport { notifyManager } from './notifyManager'\nimport { getLogger } from './logger'\nimport { Retryer, CancelOptions, isCancelledError } from './retryer'\n\n// TYPES\n\ninterface QueryConfig<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  cache: QueryCache\n  queryKey: TQueryKey\n  queryHash: string\n  options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state?: QueryState<TData, TError>\n}\n\nexport interface QueryState<TData = unknown, TError = unknown> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchMeta: any\n  isFetching: boolean\n  isInvalidated: boolean\n  isPaused: boolean\n  status: QueryStatus\n}\n\nexport interface FetchContext<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  options: QueryOptions<TQueryFnData, TError, TData, any>\n  queryKey: EnsuredQueryKey<TQueryKey>\n  state: QueryState<TData, TError>\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  onFetch: (\n    context: FetchContext<TQueryFnData, TError, TData, TQueryKey>\n  ) => void\n}\n\nexport interface FetchOptions {\n  cancelRefetch?: boolean\n  meta?: any\n}\n\nexport interface SetDataOptions {\n  updatedAt?: number\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: any\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: QueryState<TData, TError>\n  setStateOptions?: SetStateOptions\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\nexport interface SetStateOptions {\n  meta?: any\n}\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  queryKey: TQueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  initialState: QueryState<TData, TError>\n  revertState?: QueryState<TData, TError>\n  state: QueryState<TData, TError>\n  cacheTime!: number\n\n  private cache: QueryCache\n  private promise?: Promise<TData>\n  private gcTimeout?: number\n  private retryer?: Retryer<TData, TError>\n  private observers: QueryObserver<any, any, any, any, any>[]\n  private defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData, TQueryKey>) {\n    this.defaultOptions = config.defaultOptions\n    this.setOptions(config.options)\n    this.observers = []\n    this.cache = config.cache\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.initialState = config.state || this.getDefaultState(this.options)\n    this.state = this.initialState\n    this.scheduleGc()\n  }\n\n  private setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): void {\n    this.options = { ...this.defaultOptions, ...options }\n\n    // Default to 5 minutes if not cache time is set\n    this.cacheTime = Math.max(\n      this.cacheTime || 0,\n      this.options.cacheTime ?? 5 * 60 * 1000\n    )\n  }\n\n  setDefaultOptions(\n    options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): void {\n    this.defaultOptions = options\n  }\n\n  private scheduleGc(): void {\n    this.clearGcTimeout()\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(() => {\n        this.optionalRemove()\n      }, this.cacheTime)\n    }\n  }\n\n  private clearGcTimeout() {\n    clearTimeout(this.gcTimeout)\n    this.gcTimeout = undefined\n  }\n\n  private optionalRemove() {\n    if (!this.observers.length && !this.state.isFetching) {\n      this.cache.remove(this)\n    }\n  }\n\n  setData(\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): TData {\n    const prevData = this.state.data\n\n    // Get the new data\n    let data = functionalUpdate(updater, prevData)\n\n    // Use prev data if an isDataEqual function is defined and returns `true`\n    if (this.options.isDataEqual?.(prevData, data)) {\n      data = prevData as TData\n    } else if (this.options.structuralSharing !== false) {\n      // Structurally share data between prev and new data if needed\n      data = replaceEqualDeep(prevData, data)\n    }\n\n    // Set data and mark it as cached\n    this.dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n    })\n\n    return data\n  }\n\n  setState(\n    state: QueryState<TData, TError>,\n    setStateOptions?: SetStateOptions\n  ): void {\n    this.dispatch({ type: 'setState', state, setStateOptions })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.promise\n    this.retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    this.clearGcTimeout()\n    this.cancel({ silent: true })\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.initialState)\n  }\n\n  isActive(): boolean {\n    return this.observers.some(observer => observer.options.enabled !== false)\n  }\n\n  isFetching(): boolean {\n    return this.state.isFetching\n  }\n\n  isStale(): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      this.observers.some(observer => observer.getCurrentResult().isStale)\n    )\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n    )\n  }\n\n  onFocus(): void {\n    const observer = this.observers.find(x => x.shouldFetchOnWindowFocus())\n\n    if (observer) {\n      observer.refetch()\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.observers.find(x => x.shouldFetchOnReconnect())\n\n    if (observer) {\n      observer.refetch()\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.cache.notify({ type: 'observerAdded', query: this, observer })\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.indexOf(observer) !== -1) {\n      this.observers = this.observers.filter(x => x !== observer)\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.retryer.isTransportCancelable) {\n            this.retryer.cancel({ revert: true })\n          } else {\n            this.retryer.cancelRetry()\n          }\n        }\n\n        if (this.cacheTime) {\n          this.scheduleGc()\n        } else {\n          this.cache.remove(this)\n        }\n      }\n\n      this.cache.notify({ type: 'observerRemoved', query: this, observer })\n    }\n  }\n\n  getObserversCount(): number {\n    return this.observers.length\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    fetchOptions?: FetchOptions\n  ): Promise<TData> {\n    if (this.state.isFetching) {\n      if (this.state.dataUpdatedAt && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetches\n        this.cancel({ silent: true })\n      } else if (this.promise) {\n        // Return current promise if we are already fetching\n        return this.promise\n      }\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.observers.find(x => x.options.queryFn)\n      if (observer) {\n        this.setOptions(observer.options)\n      }\n    }\n\n    const queryKey = ensureQueryKeyArray(this.queryKey)\n\n    // Create query function context\n    const queryFnContext: QueryFunctionContext<TQueryKey> = {\n      queryKey,\n      pageParam: undefined,\n    }\n\n    // Create fetch function\n    const fetchFn = () =>\n      this.options.queryFn\n        ? this.options.queryFn(queryFnContext)\n        : Promise.reject('Missing queryFn')\n\n    // Trigger behavior hook\n    const context: FetchContext<TQueryFnData, TError, TData, TQueryKey> = {\n      fetchOptions,\n      options: this.options,\n      queryKey: queryKey,\n      state: this.state,\n      fetchFn,\n    }\n\n    if (this.options.behavior?.onFetch) {\n      this.options.behavior?.onFetch(context)\n    }\n\n    // Store state in case the current fetch needs to be reverted\n    this.revertState = this.state\n\n    // Set to fetching state if not already in it\n    if (\n      !this.state.isFetching ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    // Try to fetch the data\n    this.retryer = new Retryer({\n      fn: context.fetchFn as () => TData,\n      onSuccess: data => {\n        this.setData(data as TData)\n\n        // Notify cache callback\n        this.cache.config.onSuccess?.(data, this as Query<any, any, any, any>)\n\n        // Remove query after fetching if cache time is 0\n        if (this.cacheTime === 0) {\n          this.optionalRemove()\n        }\n      },\n      onError: (error: TError | { silent?: boolean }) => {\n        // Optimistically update state if needed\n        if (!(isCancelledError(error) && error.silent)) {\n          this.dispatch({\n            type: 'error',\n            error: error as TError,\n          })\n        }\n\n        if (!isCancelledError(error)) {\n          // Notify cache callback\n          this.cache.config.onError?.(error, this as Query<any, any, any, any>)\n\n          // Log error\n          getLogger().error(error)\n        }\n\n        // Remove query after fetching if cache time is 0\n        if (this.cacheTime === 0) {\n          this.optionalRemove()\n        }\n      },\n      onFail: () => {\n        this.dispatch({ type: 'failed' })\n      },\n      onPause: () => {\n        this.dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n    })\n\n    this.promise = this.retryer.promise\n\n    return this.promise\n  }\n\n  private dispatch(action: Action<TData, TError>): void {\n    this.state = this.reducer(this.state, action)\n\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onQueryUpdate(action)\n      })\n\n      this.cache.notify({ query: this, type: 'queryUpdated', action })\n    })\n  }\n\n  protected getDefaultState(\n    options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): QueryState<TData, TError> {\n    const data =\n      typeof options.initialData === 'function'\n        ? (options.initialData as InitialDataFunction<TData>)()\n        : options.initialData\n\n    const hasInitialData = typeof options.initialData !== 'undefined'\n\n    const initialDataUpdatedAt = hasInitialData\n      ? typeof options.initialDataUpdatedAt === 'function'\n        ? (options.initialDataUpdatedAt as () => number | undefined)()\n        : options.initialDataUpdatedAt\n      : 0\n\n    const hasData = typeof data !== 'undefined'\n\n    return {\n      data,\n      dataUpdateCount: 0,\n      dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n      error: null,\n      errorUpdateCount: 0,\n      errorUpdatedAt: 0,\n      fetchFailureCount: 0,\n      fetchMeta: null,\n      isFetching: false,\n      isInvalidated: false,\n      isPaused: false,\n      status: hasData ? 'success' : 'idle',\n    }\n  }\n\n  protected reducer(\n    state: QueryState<TData, TError>,\n    action: Action<TData, TError>\n  ): QueryState<TData, TError> {\n    switch (action.type) {\n      case 'failed':\n        return {\n          ...state,\n          fetchFailureCount: state.fetchFailureCount + 1,\n        }\n      case 'pause':\n        return {\n          ...state,\n          isPaused: true,\n        }\n      case 'continue':\n        return {\n          ...state,\n          isPaused: false,\n        }\n      case 'fetch':\n        return {\n          ...state,\n          fetchFailureCount: 0,\n          fetchMeta: action.meta ?? null,\n          isFetching: true,\n          isPaused: false,\n          status: !state.dataUpdatedAt ? 'loading' : state.status,\n        }\n      case 'success':\n        return {\n          ...state,\n          data: action.data,\n          dataUpdateCount: state.dataUpdateCount + 1,\n          dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n          error: null,\n          fetchFailureCount: 0,\n          isFetching: false,\n          isInvalidated: false,\n          isPaused: false,\n          status: 'success',\n        }\n      case 'error':\n        const error = action.error as unknown\n\n        if (isCancelledError(error) && error.revert && this.revertState) {\n          return { ...this.revertState }\n        }\n\n        return {\n          ...state,\n          error: error as TError,\n          errorUpdateCount: state.errorUpdateCount + 1,\n          errorUpdatedAt: Date.now(),\n          fetchFailureCount: state.fetchFailureCount + 1,\n          isFetching: false,\n          isPaused: false,\n          status: 'error',\n        }\n      case 'invalidate':\n        return {\n          ...state,\n          isInvalidated: true,\n        }\n      case 'setState':\n        return {\n          ...state,\n          ...action.state,\n        }\n      default:\n        return state\n    }\n  }\n}\n","import {\n  QueryFilters,\n  hashQueryKeyByOptions,\n  matchQuery,\n  parseFilterArgs,\n} from './utils'\nimport { Action, Query, QueryState } from './query'\nimport type { QueryKey, QueryOptions } from './types'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport { QueryObserver } from './queryObserver'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  onError?: (error: unknown, query: Query<unknown, unknown, unknown>) => void\n  onSuccess?: (data: unknown, query: Query<unknown, unknown, unknown>) => void\n}\n\ninterface QueryHashMap {\n  [hash: string]: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryAdded {\n  type: 'queryAdded'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryRemoved {\n  type: 'queryRemoved'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryUpdated {\n  type: 'queryUpdated'\n  query: Query<any, any, any, any>\n  action: Action<any, any>\n}\n\ninterface NotifyEventObserverAdded {\n  type: 'observerAdded'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventObserverRemoved {\n  type: 'observerRemoved'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventObserverResultsUpdated {\n  type: 'observerResultsUpdated'\n  query: Query<any, any, any, any>\n}\n\ntype QueryCacheNotifyEvent =\n  | NotifyEventQueryAdded\n  | NotifyEventQueryRemoved\n  | NotifyEventQueryUpdated\n  | NotifyEventObserverAdded\n  | NotifyEventObserverRemoved\n  | NotifyEventObserverResultsUpdated\n\ntype QueryCacheListener = (event?: QueryCacheNotifyEvent) => void\n\n// CLASS\n\nexport class QueryCache extends Subscribable<QueryCacheListener> {\n  config: QueryCacheConfig\n\n  private queries: Query<any, any, any, any>[]\n  private queriesMap: QueryHashMap\n\n  constructor(config?: QueryCacheConfig) {\n    super()\n    this.config = config || {}\n    this.queries = []\n    this.queriesMap = {}\n  }\n\n  build<TQueryFnData, TError, TData, TQueryKey extends QueryKey>(\n    client: QueryClient,\n    options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    state?: QueryState<TData, TError>\n  ): Query<TQueryFnData, TError, TData, TQueryKey> {\n    const queryKey = options.queryKey!\n    const queryHash =\n      options.queryHash ?? hashQueryKeyByOptions(queryKey, options)\n    let query = this.get<TQueryFnData, TError, TData, TQueryKey>(queryHash)\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n      })\n      this.add(query)\n    }\n\n    return query\n  }\n\n  add(query: Query<any, any, any, any>): void {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query\n      this.queries.push(query)\n      this.notify({\n        type: 'queryAdded',\n        query,\n      })\n    }\n  }\n\n  remove(query: Query<any, any, any, any>): void {\n    const queryInMap = this.queriesMap[query.queryHash]\n\n    if (queryInMap) {\n      query.destroy()\n\n      this.queries = this.queries.filter(x => x !== query)\n\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash]\n      }\n\n      this.notify({ type: 'queryRemoved', query })\n    }\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        this.remove(query)\n      })\n    })\n  }\n\n  get<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueyKey extends QueryKey = QueryKey\n  >(\n    queryHash: string\n  ): Query<TQueryFnData, TError, TData, TQueyKey> | undefined {\n    return this.queriesMap[queryHash]\n  }\n\n  getAll(): Query[] {\n    return this.queries\n  }\n\n  find<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    arg1: QueryKey,\n    arg2?: QueryFilters\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    const [filters] = parseFilterArgs(arg1, arg2)\n\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.queries.find(query => matchQuery(filters, query))\n  }\n\n  findAll(queryKey?: QueryKey, filters?: QueryFilters): Query[]\n  findAll(filters?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[] {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    return filters\n      ? this.queries.filter(query => matchQuery(filters, query))\n      : this.queries\n  }\n\n  notify(event: QueryCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event)\n      })\n    })\n  }\n\n  onFocus(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onFocus()\n      })\n    })\n  }\n\n  onOnline(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onOnline()\n      })\n    })\n  }\n}\n","import type { MutationOptions, MutationStatus } from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport { getLogger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport { Retryer } from './retryer'\nimport { noop } from './utils'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface LoadingAction<TVariables, TContext> {\n  type: 'loading'\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError, TVariables, TContext> {\n  type: 'setState'\n  state: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | LoadingAction<TVariables, TContext>\n  | PauseAction\n  | SetStateAction<TData, TError, TVariables, TContext>\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  mutationId: number\n\n  private observers: MutationObserver<TData, TError, TVariables, TContext>[]\n  private mutationCache: MutationCache\n  private retryer?: Retryer<TData, TError>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    this.options = {\n      ...config.defaultOptions,\n      ...config.options,\n    }\n    this.mutationId = config.mutationId\n    this.mutationCache = config.mutationCache\n    this.observers = []\n    this.state = config.state || getDefaultState()\n  }\n\n  setState(state: MutationState<TData, TError, TVariables, TContext>): void {\n    this.dispatch({ type: 'setState', state })\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.observers = this.observers.filter(x => x !== observer)\n  }\n\n  cancel(): Promise<void> {\n    if (this.retryer) {\n      this.retryer.cancel()\n      return this.retryer.promise.then(noop).catch(noop)\n    }\n    return Promise.resolve()\n  }\n\n  continue(): Promise<TData> {\n    if (this.retryer) {\n      this.retryer.continue()\n      return this.retryer.promise\n    }\n    return this.execute()\n  }\n\n  execute(): Promise<TData> {\n    let data: TData\n\n    const restored = this.state.status === 'loading'\n\n    let promise = Promise.resolve()\n\n    if (!restored) {\n      this.dispatch({ type: 'loading', variables: this.options.variables! })\n      promise = promise\n        .then(() => this.options.onMutate?.(this.state.variables!))\n        .then(context => {\n          if (context !== this.state.context) {\n            this.dispatch({\n              type: 'loading',\n              context,\n              variables: this.state.variables,\n            })\n          }\n        })\n    }\n\n    return promise\n      .then(() => this.executeMutation())\n      .then(result => {\n        data = result\n        // Notify cache callback\n        this.mutationCache.config.onSuccess?.(\n          data,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>\n        )\n      })\n      .then(() =>\n        this.options.onSuccess?.(\n          data,\n          this.state.variables!,\n          this.state.context!\n        )\n      )\n      .then(() =>\n        this.options.onSettled?.(\n          data,\n          null,\n          this.state.variables!,\n          this.state.context\n        )\n      )\n      .then(() => {\n        this.dispatch({ type: 'success', data })\n        return data\n      })\n      .catch(error => {\n        // Notify cache callback\n        this.mutationCache.config.onError?.(\n          error,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>\n        )\n\n        // Log error\n        getLogger().error(error)\n\n        return Promise.resolve()\n          .then(() =>\n            this.options.onError?.(\n              error,\n              this.state.variables!,\n              this.state.context\n            )\n          )\n          .then(() =>\n            this.options.onSettled?.(\n              undefined,\n              error,\n              this.state.variables!,\n              this.state.context\n            )\n          )\n          .then(() => {\n            this.dispatch({ type: 'error', error })\n            throw error\n          })\n      })\n  }\n\n  private executeMutation(): Promise<TData> {\n    this.retryer = new Retryer({\n      fn: () => {\n        if (!this.options.mutationFn) {\n          return Promise.reject('No mutationFn found')\n        }\n        return this.options.mutationFn(this.state.variables!)\n      },\n      onFail: () => {\n        this.dispatch({ type: 'failed' })\n      },\n      onPause: () => {\n        this.dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.dispatch({ type: 'continue' })\n      },\n      retry: this.options.retry ?? 0,\n      retryDelay: this.options.retryDelay,\n    })\n\n    return this.retryer.promise\n  }\n\n  private dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    this.state = reducer(this.state, action)\n\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onMutationUpdate(action)\n      })\n      this.mutationCache.notify(this)\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n  }\n}\n\nfunction reducer<TData, TError, TVariables, TContext>(\n  state: MutationState<TData, TError, TVariables, TContext>,\n  action: Action<TData, TError, TVariables, TContext>\n): MutationState<TData, TError, TVariables, TContext> {\n  switch (action.type) {\n    case 'failed':\n      return {\n        ...state,\n        failureCount: state.failureCount + 1,\n      }\n    case 'pause':\n      return {\n        ...state,\n        isPaused: true,\n      }\n    case 'continue':\n      return {\n        ...state,\n        isPaused: false,\n      }\n    case 'loading':\n      return {\n        ...state,\n        context: action.context,\n        data: undefined,\n        error: null,\n        isPaused: false,\n        status: 'loading',\n        variables: action.variables,\n      }\n    case 'success':\n      return {\n        ...state,\n        data: action.data,\n        error: null,\n        status: 'success',\n        isPaused: false,\n      }\n    case 'error':\n      return {\n        ...state,\n        data: undefined,\n        error: action.error,\n        failureCount: state.failureCount + 1,\n        isPaused: false,\n        status: 'error',\n      }\n    case 'setState':\n      return {\n        ...state,\n        ...action.state,\n      }\n    default:\n      return state\n  }\n}\n","import type { MutationOptions } from './types'\nimport type { QueryClient } from './queryClient'\nimport { notifyManager } from './notifyManager'\nimport { Mutation, MutationState } from './mutation'\nimport { matchMutation, MutationFilters, noop } from './utils'\nimport { Subscribable } from './subscribable'\n\n// TYPES\n\ninterface MutationCacheConfig {\n  onError?: (\n    error: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown, unknown>\n  ) => void\n  onSuccess?: (\n    data: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown, unknown>\n  ) => void\n}\n\ntype MutationCacheListener = (mutation?: Mutation) => void\n\n// CLASS\n\nexport class MutationCache extends Subscribable<MutationCacheListener> {\n  config: MutationCacheConfig\n\n  private mutations: Mutation<any, any, any, any>[]\n  private mutationId: number\n\n  constructor(config?: MutationCacheConfig) {\n    super()\n    this.config = config || {}\n    this.mutations = []\n    this.mutationId = 0\n  }\n\n  build<TData, TError, TVariables, TContext>(\n    client: QueryClient,\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n    state?: MutationState<TData, TError, TVariables, TContext>\n  ): Mutation<TData, TError, TVariables, TContext> {\n    const mutation = new Mutation({\n      mutationCache: this,\n      mutationId: ++this.mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n      defaultOptions: options.mutationKey\n        ? client.getMutationDefaults(options.mutationKey)\n        : undefined,\n    })\n\n    this.add(mutation)\n\n    return mutation\n  }\n\n  add(mutation: Mutation<any, any, any, any>): void {\n    this.mutations.push(mutation)\n    this.notify(mutation)\n  }\n\n  remove(mutation: Mutation<any, any, any, any>): void {\n    this.mutations = this.mutations.filter(x => x !== mutation)\n    mutation.cancel()\n    this.notify(mutation)\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.mutations.forEach(mutation => {\n        this.remove(mutation)\n      })\n    })\n  }\n\n  getAll(): Mutation[] {\n    return this.mutations\n  }\n\n  find<TData = unknown, TError = unknown, TVariables = any, TContext = unknown>(\n    filters: MutationFilters\n  ): Mutation<TData, TError, TVariables, TContext> | undefined {\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.mutations.find(mutation => matchMutation(filters, mutation))\n  }\n\n  findAll(filters: MutationFilters): Mutation[] {\n    return this.mutations.filter(mutation => matchMutation(filters, mutation))\n  }\n\n  notify(mutation?: Mutation<any, any, any, any>) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(mutation)\n      })\n    })\n  }\n\n  onFocus(): void {\n    this.resumePausedMutations()\n  }\n\n  onOnline(): void {\n    this.resumePausedMutations()\n  }\n\n  resumePausedMutations(): Promise<void> {\n    const pausedMutations = this.mutations.filter(x => x.state.isPaused)\n    return notifyManager.batch(() =>\n      pausedMutations.reduce(\n        (promise, mutation) =>\n          promise.then(() => mutation.continue().catch(noop)),\n        Promise.resolve()\n      )\n    )\n  }\n}\n","import type { QueryBehavior } from './query'\nimport { isCancelable } from './retryer'\nimport type {\n  InfiniteData,\n  QueryFunctionContext,\n  QueryOptions,\n  RefetchQueryFilters,\n} from './types'\n\nexport function infiniteQueryBehavior<\n  TQueryFnData,\n  TError,\n  TData\n>(): QueryBehavior<TQueryFnData, TError, InfiniteData<TData>> {\n  return {\n    onFetch: context => {\n      context.fetchFn = () => {\n        const refetchPage: RefetchQueryFilters['refetchPage'] | undefined =\n          context.fetchOptions?.meta?.refetchPage\n        const fetchMore = context.fetchOptions?.meta?.fetchMore\n        const pageParam = fetchMore?.pageParam\n        const isFetchingNextPage = fetchMore?.direction === 'forward'\n        const isFetchingPreviousPage = fetchMore?.direction === 'backward'\n        const oldPages = context.state.data?.pages || []\n        const oldPageParams = context.state.data?.pageParams || []\n        let newPageParams = oldPageParams\n        let cancelled = false\n\n        // Get query function\n        const queryFn =\n          context.options.queryFn || (() => Promise.reject('Missing queryFn'))\n\n        const buildNewPages = (\n          pages: unknown[],\n          param: unknown,\n          page: unknown,\n          previous?: boolean\n        ) => {\n          newPageParams = previous\n            ? [param, ...newPageParams]\n            : [...newPageParams, param]\n          return previous ? [page, ...pages] : [...pages, page]\n        }\n\n        // Create function to fetch a page\n        const fetchPage = (\n          pages: unknown[],\n          manual?: boolean,\n          param?: unknown,\n          previous?: boolean\n        ): Promise<unknown[]> => {\n          if (cancelled) {\n            return Promise.reject('Cancelled')\n          }\n\n          if (typeof param === 'undefined' && !manual && pages.length) {\n            return Promise.resolve(pages)\n          }\n\n          const queryFnContext: QueryFunctionContext = {\n            queryKey: context.queryKey,\n            pageParam: param,\n          }\n\n          const queryFnResult = queryFn(queryFnContext)\n\n          const promise = Promise.resolve(queryFnResult).then(page =>\n            buildNewPages(pages, param, page, previous)\n          )\n\n          if (isCancelable(queryFnResult)) {\n            const promiseAsAny = promise as any\n            promiseAsAny.cancel = queryFnResult.cancel\n          }\n\n          return promise\n        }\n\n        let promise: Promise<unknown[]>\n\n        // Fetch first page?\n        if (!oldPages.length) {\n          promise = fetchPage([])\n        }\n\n        // Fetch next page?\n        else if (isFetchingNextPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getNextPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param)\n        }\n\n        // Fetch previous page?\n        else if (isFetchingPreviousPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getPreviousPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param, true)\n        }\n\n        // Refetch pages\n        else {\n          newPageParams = []\n\n          const manual = typeof context.options.getNextPageParam === 'undefined'\n\n          const shouldFetchFirstPage =\n            refetchPage && oldPages[0]\n              ? refetchPage(oldPages[0], 0, oldPages)\n              : true\n\n          // Fetch first page\n          promise = shouldFetchFirstPage\n            ? fetchPage([], manual, oldPageParams[0])\n            : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0]))\n\n          // Fetch remaining pages\n          for (let i = 1; i < oldPages.length; i++) {\n            promise = promise.then(pages => {\n              const shouldFetchNextPage =\n                refetchPage && oldPages[i]\n                  ? refetchPage(oldPages[i], i, oldPages)\n                  : true\n\n              if (shouldFetchNextPage) {\n                const param = manual\n                  ? oldPageParams[i]\n                  : getNextPageParam(context.options, pages)\n                return fetchPage(pages, manual, param)\n              }\n              return Promise.resolve(\n                buildNewPages(pages, oldPageParams[i], oldPages[i])\n              )\n            })\n          }\n        }\n\n        const finalPromise = promise.then(pages => ({\n          pages,\n          pageParams: newPageParams,\n        }))\n\n        const finalPromiseAsAny = finalPromise as any\n\n        finalPromiseAsAny.cancel = () => {\n          cancelled = true\n          if (isCancelable(promise)) {\n            promise.cancel()\n          }\n        }\n\n        return finalPromise\n      }\n    },\n  }\n}\n\nexport function getNextPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[]\n): unknown | undefined {\n  return options.getNextPageParam?.(pages[pages.length - 1], pages)\n}\n\nexport function getPreviousPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[]\n): unknown | undefined {\n  return options.getPreviousPageParam?.(pages[0], pages)\n}\n\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasNextPage(\n  options: QueryOptions<any, any>,\n  pages?: unknown\n): boolean | undefined {\n  if (options.getNextPageParam && Array.isArray(pages)) {\n    const nextPageParam = getNextPageParam(options, pages)\n    return (\n      typeof nextPageParam !== 'undefined' &&\n      nextPageParam !== null &&\n      nextPageParam !== false\n    )\n  }\n}\n\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasPreviousPage(\n  options: QueryOptions<any, any>,\n  pages?: unknown\n): boolean | undefined {\n  if (options.getPreviousPageParam && Array.isArray(pages)) {\n    const previousPageParam = getPreviousPageParam(options, pages)\n    return (\n      typeof previousPageParam !== 'undefined' &&\n      previousPageParam !== null &&\n      previousPageParam !== false\n    )\n  }\n}\n","import {\n  QueryFilters,\n  Updater,\n  hashQueryKey,\n  noop,\n  parseFilterArgs,\n  parseQueryArgs,\n  partialMatchKey,\n  hashQueryKeyByOptions,\n  MutationFilters,\n} from './utils'\nimport type {\n  DefaultOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  RefetchQueryFilters,\n  ResetOptions,\n  ResetQueryFilters,\n} from './types'\nimport type { QueryState, SetDataOptions } from './query'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { CancelOptions } from './retryer'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\n\n// TYPES\n\ninterface QueryClientConfig {\n  queryCache?: QueryCache\n  mutationCache?: MutationCache\n  defaultOptions?: DefaultOptions\n}\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: QueryOptions<any, any, any>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  private queryCache: QueryCache\n  private mutationCache: MutationCache\n  private defaultOptions: DefaultOptions\n  private queryDefaults: QueryDefaults[]\n  private mutationDefaults: MutationDefaults[]\n  private unsubscribeFocus?: () => void\n  private unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.queryCache = config.queryCache || new QueryCache()\n    this.mutationCache = config.mutationCache || new MutationCache()\n    this.defaultOptions = config.defaultOptions || {}\n    this.queryDefaults = []\n    this.mutationDefaults = []\n  }\n\n  mount(): void {\n    this.unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused() && onlineManager.isOnline()) {\n        this.mutationCache.onFocus()\n        this.queryCache.onFocus()\n      }\n    })\n    this.unsubscribeOnline = onlineManager.subscribe(() => {\n      if (focusManager.isFocused() && onlineManager.isOnline()) {\n        this.mutationCache.onOnline()\n        this.queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.unsubscribeFocus?.()\n    this.unsubscribeOnline?.()\n  }\n\n  isFetching(filters?: QueryFilters): number\n  isFetching(queryKey?: QueryKey, filters?: QueryFilters): number\n  isFetching(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): number {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    filters.fetching = true\n    return this.queryCache.findAll(filters).length\n  }\n\n  isMutating(filters?: MutationFilters): number {\n    return this.mutationCache.findAll({ ...filters, fetching: true }).length\n  }\n\n  getQueryData<TData = unknown>(\n    queryKey: QueryKey,\n    filters?: QueryFilters\n  ): TData | undefined {\n    return this.queryCache.find<TData>(queryKey, filters)?.state.data\n  }\n\n  getQueriesData<TData = unknown>(queryKey: QueryKey): [QueryKey, TData][]\n  getQueriesData<TData = unknown>(filters: QueryFilters): [QueryKey, TData][]\n  getQueriesData<TData = unknown>(\n    queryKeyOrFilters: QueryKey | QueryFilters\n  ): [QueryKey, TData][] {\n    return this.getQueryCache()\n      .findAll(queryKeyOrFilters)\n      .map(({ queryKey, state }) => {\n        const data = state.data as TData\n        return [queryKey, data]\n      })\n  }\n\n  setQueryData<TData>(\n    queryKey: QueryKey,\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): TData {\n    const parsedOptions = parseQueryArgs(queryKey)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n    return this.queryCache\n      .build(this, defaultedOptions)\n      .setData(updater, options)\n  }\n\n  setQueriesData<TData>(\n    queryKey: QueryKey,\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): [QueryKey, TData][]\n\n  setQueriesData<TData>(\n    filters: QueryFilters,\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): [QueryKey, TData][]\n\n  setQueriesData<TData>(\n    queryKeyOrFilters: QueryKey | QueryFilters,\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): [QueryKey, TData][] {\n    return notifyManager.batch(() =>\n      this.getQueryCache()\n        .findAll(queryKeyOrFilters)\n        .map(({ queryKey }) => [\n          queryKey,\n          this.setQueryData<TData>(queryKey, updater, options),\n        ])\n    )\n  }\n\n  getQueryState<TData = unknown, TError = undefined>(\n    queryKey: QueryKey,\n    filters?: QueryFilters\n  ): QueryState<TData, TError> | undefined {\n    return this.queryCache.find<TData, TError>(queryKey, filters)?.state\n  }\n\n  removeQueries(filters?: QueryFilters): void\n  removeQueries(queryKey?: QueryKey, filters?: QueryFilters): void\n  removeQueries(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): void {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    const queryCache = this.queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries<TPageData = unknown>(\n    filters?: ResetQueryFilters<TPageData>,\n    options?: ResetOptions\n  ): Promise<void>\n  resetQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: ResetQueryFilters<TPageData>,\n    options?: ResetOptions\n  ): Promise<void>\n  resetQueries(\n    arg1?: QueryKey | ResetQueryFilters,\n    arg2?: ResetQueryFilters | ResetOptions,\n    arg3?: ResetOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n    const queryCache = this.queryCache\n\n    const refetchFilters: RefetchQueryFilters = {\n      ...filters,\n      active: true,\n    }\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        query.reset()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  cancelQueries(filters?: QueryFilters, options?: CancelOptions): Promise<void>\n  cancelQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: CancelOptions\n  ): Promise<void>\n  cancelQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | CancelOptions,\n    arg3?: CancelOptions\n  ): Promise<void> {\n    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3)\n\n    if (typeof cancelOptions.revert === 'undefined') {\n      cancelOptions.revert = true\n    }\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache.findAll(filters).map(query => query.cancel(cancelOptions))\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries<TPageData = unknown>(\n    filters?: InvalidateQueryFilters<TPageData>,\n    options?: InvalidateOptions\n  ): Promise<void>\n  invalidateQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: InvalidateQueryFilters<TPageData>,\n    options?: InvalidateOptions\n  ): Promise<void>\n  invalidateQueries(\n    arg1?: QueryKey | InvalidateQueryFilters,\n    arg2?: InvalidateQueryFilters | InvalidateOptions,\n    arg3?: InvalidateOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    const refetchFilters: RefetchQueryFilters = {\n      ...filters,\n      // if filters.refetchActive is not provided and filters.active is explicitly false,\n      // e.g. invalidateQueries({ active: false }), we don't want to refetch active queries\n      active: filters.refetchActive ?? filters.active ?? true,\n      inactive: filters.refetchInactive ?? false,\n    }\n\n    return notifyManager.batch(() => {\n      this.queryCache.findAll(filters).forEach(query => {\n        query.invalidate()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  refetchQueries<TPageData = unknown>(\n    filters?: RefetchQueryFilters<TPageData>,\n    options?: RefetchOptions\n  ): Promise<void>\n  refetchQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: RefetchQueryFilters<TPageData>,\n    options?: RefetchOptions\n  ): Promise<void>\n  refetchQueries(\n    arg1?: QueryKey | RefetchQueryFilters,\n    arg2?: RefetchQueryFilters | RefetchOptions,\n    arg3?: RefetchOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache.findAll(filters).map(query =>\n        query.fetch(undefined, {\n          meta: { refetchPage: filters?.refetchPage },\n        })\n      )\n    )\n\n    let promise = Promise.all(promises).then(noop)\n\n    if (!options?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1: TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(defaultedOptions.staleTime)\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1: TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void> {\n    return this.fetchQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1:\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    parsedOptions.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData\n    >()\n    return this.fetchQuery(parsedOptions)\n  }\n\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1:\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  cancelMutations(): Promise<void> {\n    const promises = notifyManager.batch(() =>\n      this.mutationCache.getAll().map(mutation => mutation.cancel())\n    )\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  resumePausedMutations(): Promise<void> {\n    return this.getMutationCache().resumePausedMutations()\n  }\n\n  executeMutation<\n    TData = unknown,\n    TError = unknown,\n    TVariables = void,\n    TContext = unknown\n  >(\n    options: MutationOptions<TData, TError, TVariables, TContext>\n  ): Promise<TData> {\n    return this.mutationCache.build(this, options).execute()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.mutationCache\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.defaultOptions = options\n  }\n\n  setQueryDefaults(\n    queryKey: QueryKey,\n    options: QueryObserverOptions<any, any, any, any>\n  ): void {\n    const result = this.queryDefaults.find(\n      x => hashQueryKey(queryKey) === hashQueryKey(x.queryKey)\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.queryDefaults.push({ queryKey, defaultOptions: options })\n    }\n  }\n\n  getQueryDefaults(\n    queryKey?: QueryKey\n  ): QueryObserverOptions<any, any, any, any, any> | undefined {\n    return queryKey\n      ? this.queryDefaults.find(x => partialMatchKey(queryKey, x.queryKey))\n          ?.defaultOptions\n      : undefined\n  }\n\n  setMutationDefaults(\n    mutationKey: MutationKey,\n    options: MutationObserverOptions<any, any, any, any>\n  ): void {\n    const result = this.mutationDefaults.find(\n      x => hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey)\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.mutationDefaults.push({ mutationKey, defaultOptions: options })\n    }\n  }\n\n  getMutationDefaults(\n    mutationKey?: MutationKey\n  ): MutationObserverOptions<any, any, any, any> | undefined {\n    return mutationKey\n      ? this.mutationDefaults.find(x =>\n          partialMatchKey(mutationKey, x.mutationKey)\n        )?.defaultOptions\n      : undefined\n  }\n\n  defaultQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey extends QueryKey\n  >(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey> {\n    if (options?._defaulted) {\n      return options\n    }\n\n    const defaultedOptions = {\n      ...this.defaultOptions.queries,\n      ...this.getQueryDefaults(options?.queryKey),\n      ...options,\n      _defaulted: true,\n    } as QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n\n    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions\n      )\n    }\n\n    return defaultedOptions\n  }\n\n  defaultQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey extends QueryKey\n  >(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey> {\n    return this.defaultQueryOptions(options)\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.defaultOptions.mutations,\n      ...this.getMutationDefaults(options?.mutationKey),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.queryCache.clear()\n    this.mutationCache.clear()\n  }\n}\n","import { RefetchQueryFilters } from './types'\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceEqualDeep,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n  ResultOptions,\n} from './types'\nimport type { Query, QueryState, Action, FetchOptions } from './query'\nimport type { QueryClient } from './queryClient'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { getLogger } from './logger'\nimport { isCancelledError } from './retryer'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>\n) => void\n\nexport interface NotifyOptions {\n  cache?: boolean\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n\n  private client: QueryClient\n  private currentQuery!: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  private currentQueryInitialState!: QueryState<TQueryData, TError>\n  private currentResult!: QueryObserverResult<TData, TError>\n  private currentResultState?: QueryState<TQueryData, TError>\n  private currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  private previousQueryResult?: QueryObserverResult<TData, TError>\n  private previousSelectError: Error | null\n  private staleTimeoutId?: number\n  private refetchIntervalId?: number\n  private trackedProps!: Array<keyof QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ) {\n    super()\n\n    this.client = client\n    this.options = options\n    this.trackedProps = []\n    this.previousSelectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch()\n      }\n\n      this.updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOnReconnect(this.currentQuery, this.options)\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOnWindowFocus(this.currentQuery, this.options)\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.clearTimers()\n    this.currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.currentQuery\n\n    this.options = this.client.defaultQueryObserverOptions(options)\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.updateQuery()\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions\n      )\n    ) {\n      this.executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.refetchInterval !== prevOptions.refetchInterval)\n    ) {\n      this.updateRefetchInterval()\n    }\n  }\n\n  getOptimisticResult(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): QueryObserverResult<TData, TError> {\n    const defaultedOptions = this.client.defaultQueryObserverOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(\n        this.client,\n        defaultedOptions as QueryOptions<\n          TQueryFnData,\n          TError,\n          TQueryData,\n          TQueryKey\n        >\n      )\n\n    return this.createResult(query, defaultedOptions)\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach(key => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          const typedKey = key as keyof QueryObserverResult\n          if (!this.trackedProps.includes(typedKey)) {\n            this.trackedProps.push(typedKey)\n          }\n          return result[typedKey]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  getNextResult(\n    options?: ResultOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return new Promise((resolve, reject) => {\n      const unsubscribe = this.subscribe(result => {\n        if (!result.isFetching) {\n          unsubscribe()\n          if (result.isError && options?.throwOnError) {\n            reject(result.error)\n          } else {\n            resolve(result)\n          }\n        }\n      })\n    })\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.currentQuery\n  }\n\n  remove(): void {\n    this.client.getQueryCache().remove(this.currentQuery)\n  }\n\n  refetch<TPageData>(\n    options?: RefetchOptions & RefetchQueryFilters<TPageData>\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.fetch({\n      ...options,\n      meta: { refetchPage: options?.refetchPage },\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.client.defaultQueryObserverOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(\n        this.client,\n        defaultedOptions as QueryOptions<\n          TQueryFnData,\n          TError,\n          TQueryData,\n          TQueryKey\n        >\n      )\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions?: ObserverFetchOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.executeFetch(fetchOptions).then(() => {\n      this.updateResult()\n      return this.currentResult\n    })\n  }\n\n  private executeFetch(\n    fetchOptions?: ObserverFetchOptions\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  private updateStaleTimeout(): void {\n    this.clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.currentResult.dataUpdatedAt,\n      this.options.staleTime\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  private updateRefetchInterval(): void {\n    this.clearRefetchInterval()\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.options.refetchInterval)\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.executeFetch()\n      }\n    }, this.options.refetchInterval)\n  }\n\n  private updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval()\n  }\n\n  private clearTimers(): void {\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n  }\n\n  private clearStaleTimeout(): void {\n    clearTimeout(this.staleTimeoutId)\n    this.staleTimeoutId = undefined\n  }\n\n  private clearRefetchInterval(): void {\n    clearInterval(this.refetchIntervalId)\n    this.refetchIntervalId = undefined\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.currentQuery\n    const prevOptions = this.options\n    const prevResult = this.currentResult\n    const prevResultState = this.currentResultState\n    const prevResultOptions = this.currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.currentQueryInitialState\n    const prevQueryResult = queryChange\n      ? this.currentResult\n      : this.previousQueryResult\n\n    const { state } = query\n    let { dataUpdatedAt, error, errorUpdatedAt, isFetching, status } = state\n    let isPreviousData = false\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options.optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        isFetching = true\n        if (!dataUpdatedAt) {\n          status = 'loading'\n        }\n      }\n    }\n\n    // Keep previous data if needed\n    if (\n      options.keepPreviousData &&\n      !state.dataUpdateCount &&\n      prevQueryResult?.isSuccess &&\n      status !== 'error'\n    ) {\n      data = prevQueryResult.data\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt\n      status = prevQueryResult.status\n      isPreviousData = true\n    }\n    // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === prevResultOptions?.select &&\n        !this.previousSelectError\n      ) {\n        data = prevResult.data\n      } else {\n        try {\n          data = options.select(state.data)\n          if (options.structuralSharing !== false) {\n            data = replaceEqualDeep(prevResult?.data, data)\n          }\n          this.previousSelectError = null\n        } catch (selectError) {\n          getLogger().error(selectError)\n          error = selectError\n          this.previousSelectError = selectError\n          errorUpdatedAt = Date.now()\n          status = 'error'\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = (state.data as unknown) as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      (status === 'loading' || status === 'idle')\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (options.placeholderData as PlaceholderDataFunction<TQueryData>)()\n            : options.placeholderData\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData)\n            if (options.structuralSharing !== false) {\n              placeholderData = replaceEqualDeep(\n                prevResult?.data,\n                placeholderData\n              )\n            }\n            this.previousSelectError = null\n          } catch (selectError) {\n            getLogger().error(selectError)\n            error = selectError\n            this.previousSelectError = selectError\n            errorUpdatedAt = Date.now()\n            status = 'error'\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = placeholderData as TData\n        isPlaceholderData = true\n      }\n    }\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      isLoading: status === 'loading',\n      isSuccess: status === 'success',\n      isError: status === 'error',\n      isIdle: status === 'idle',\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && status !== 'loading',\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  private shouldNotifyListeners(\n    result: QueryObserverResult,\n    prevResult?: QueryObserverResult\n  ): boolean {\n    if (!prevResult) {\n      return true\n    }\n\n    if (result === prevResult) {\n      return false\n    }\n\n    const { notifyOnChangeProps, notifyOnChangePropsExclusions } = this.options\n\n    if (!notifyOnChangeProps && !notifyOnChangePropsExclusions) {\n      return true\n    }\n\n    if (notifyOnChangeProps === 'tracked' && !this.trackedProps.length) {\n      return true\n    }\n\n    const includedProps =\n      notifyOnChangeProps === 'tracked'\n        ? this.trackedProps\n        : notifyOnChangeProps\n\n    return Object.keys(result).some(key => {\n      const typedKey = key as keyof QueryObserverResult\n      const changed = result[typedKey] !== prevResult[typedKey]\n      const isIncluded = includedProps?.some(x => x === key)\n      const isExcluded = notifyOnChangePropsExclusions?.some(x => x === key)\n      return changed && !isExcluded && (!includedProps || isIncluded)\n    })\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    this.currentResult = this.createResult(this.currentQuery, this.options)\n    this.currentResultState = this.currentQuery.state\n    this.currentResultOptions = this.options\n\n    // Only notify if something has changed\n    if (shallowEqualObjects(this.currentResult, prevResult)) {\n      return\n    }\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = { cache: true }\n\n    if (\n      notifyOptions?.listeners !== false &&\n      this.shouldNotifyListeners(this.currentResult, prevResult)\n    ) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  private updateQuery(): void {\n    const query = this.client\n      .getQueryCache()\n      .build(\n        this.client,\n        this.options as QueryOptions<\n          TQueryFnData,\n          TError,\n          TQueryData,\n          TQueryKey\n        >\n      )\n\n    if (query === this.currentQuery) {\n      return\n    }\n\n    const prevQuery = this.currentQuery\n    this.currentQuery = query\n    this.currentQueryInitialState = query.state\n    this.previousQueryResult = this.currentResult\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(action: Action<TData, TError>): void {\n    const notifyOptions: NotifyOptions = {}\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true\n    }\n\n    this.updateResult(notifyOptions)\n\n    if (this.hasListeners()) {\n      this.updateTimers()\n    }\n  }\n\n  private notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        this.options.onSuccess?.(this.currentResult.data!)\n        this.options.onSettled?.(this.currentResult.data!, null)\n      } else if (notifyOptions.onError) {\n        this.options.onError?.(this.currentResult.error!)\n        this.options.onSettled?.(undefined, this.currentResult.error!)\n      }\n\n      // Then trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      if (notifyOptions.cache) {\n        this.client\n          .getQueryCache()\n          .notify({ query: this.currentQuery, type: 'observerResultsUpdated' })\n      }\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldRefetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    query.state.dataUpdatedAt > 0 &&\n    (options.refetchOnMount === 'always' ||\n      (options.refetchOnMount !== false && isStale(query, options)))\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) || shouldRefetchOnMount(query, options)\n  )\n}\n\nfunction shouldFetchOnReconnect(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    (options.refetchOnReconnect === 'always' ||\n      (options.refetchOnReconnect !== false && isStale(query, options)))\n  )\n}\n\nfunction shouldFetchOnWindowFocus(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    (options.refetchOnWindowFocus === 'always' ||\n      (options.refetchOnWindowFocus !== false && isStale(query, options)))\n  )\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    (!options.suspense ||\n      query.state.status !== 'error' ||\n      prevOptions.enabled === false) &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n","import { difference, replaceAt } from './utils'\nimport { notifyManager } from './notifyManager'\nimport type { QueryObserverOptions, QueryObserverResult } from './types'\nimport type { QueryClient } from './queryClient'\nimport { NotifyOptions, QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\n\ntype QueriesObserverListener = (result: QueryObserverResult[]) => void\n\nexport class QueriesObserver extends Subscribable<QueriesObserverListener> {\n  private client: QueryClient\n  private result: QueryObserverResult[]\n  private queries: QueryObserverOptions[]\n  private observers: QueryObserver[]\n  private observersMap: Record<string, QueryObserver>\n\n  constructor(client: QueryClient, queries?: QueryObserverOptions[]) {\n    super()\n\n    this.client = client\n    this.queries = []\n    this.result = []\n    this.observers = []\n    this.observersMap = {}\n\n    if (queries) {\n      this.setQueries(queries)\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.observers.forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.observers.forEach(observer => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: QueryObserverOptions[],\n    notifyOptions?: NotifyOptions\n  ): void {\n    this.queries = queries\n    this.updateObservers(notifyOptions)\n  }\n\n  getCurrentResult(): QueryObserverResult[] {\n    return this.result\n  }\n\n  getOptimisticResult(queries: QueryObserverOptions[]): QueryObserverResult[] {\n    return queries.map((options, index) => {\n      const defaultedOptions = this.client.defaultQueryObserverOptions(options)\n      return this.getObserver(defaultedOptions, index).getOptimisticResult(\n        defaultedOptions\n      )\n    })\n  }\n\n  private getObserver(\n    options: QueryObserverOptions,\n    index: number\n  ): QueryObserver {\n    const defaultedOptions = this.client.defaultQueryObserverOptions(options)\n    let currentObserver = this.observersMap[defaultedOptions.queryHash!]\n    if (!currentObserver && defaultedOptions.keepPreviousData) {\n      currentObserver = this.observers[index]\n    }\n    return currentObserver ?? new QueryObserver(this.client, defaultedOptions)\n  }\n\n  private updateObservers(notifyOptions?: NotifyOptions): void {\n    notifyManager.batch(() => {\n      let hasIndexChange = false\n\n      const prevObservers = this.observers\n      const prevObserversMap = this.observersMap\n\n      const newResult: QueryObserverResult[] = []\n      const newObservers: QueryObserver[] = []\n      const newObserversMap: Record<string, QueryObserver> = {}\n\n      this.queries.forEach((options, i) => {\n        const defaultedOptions = this.client.defaultQueryObserverOptions(\n          options\n        )\n        const queryHash = defaultedOptions.queryHash!\n        const observer = this.getObserver(defaultedOptions, i)\n\n        if (prevObserversMap[queryHash] || defaultedOptions.keepPreviousData) {\n          observer.setOptions(defaultedOptions, notifyOptions)\n        }\n\n        if (observer !== prevObservers[i]) {\n          hasIndexChange = true\n        }\n\n        newObservers.push(observer)\n        newResult.push(observer.getCurrentResult())\n        newObserversMap[queryHash] = observer\n      })\n\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.observers = newObservers\n      this.observersMap = newObserversMap\n      this.result = newResult\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach(observer => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result)\n        })\n      })\n\n      this.notify()\n    })\n  }\n\n  private onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.observers.indexOf(observer)\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result)\n      this.notify()\n    }\n  }\n\n  private notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(this.result)\n      })\n    })\n  }\n}\n","import type {\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport { ObserverFetchOptions, QueryObserver } from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\nimport { Query } from './query'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  InfiniteData<TData>,\n  InfiniteData<TQueryData>\n> {\n  // Type override\n  subscribe!: (\n    listener?: InfiniteQueryObserverListener<TData, TError>\n  ) => () => void\n\n  // Type override\n  getCurrentResult!: () => InfiniteQueryObserverResult<TData, TError>\n\n  // Type override\n  protected fetch!: (\n    fetchOptions?: ObserverFetchOptions\n  ) => Promise<InfiniteQueryObserverResult<TData, TError>>\n\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options?: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ): void {\n    super.setOptions({\n      ...options,\n      behavior: infiniteQueryBehavior(),\n    })\n  }\n\n  getOptimisticResult(\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ): InfiniteQueryObserverResult<TData, TError> {\n    options.behavior = infiniteQueryBehavior()\n    return super.getOptimisticResult(options) as InfiniteQueryObserverResult<\n      TData,\n      TError\n    >\n  }\n\n  fetchNextPage(\n    options?: FetchNextPageOptions\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      cancelRefetch: true,\n      throwOnError: options?.throwOnError,\n      meta: {\n        fetchMore: { direction: 'forward', pageParam: options?.pageParam },\n      },\n    })\n  }\n\n  fetchPreviousPage(\n    options?: FetchPreviousPageOptions\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      cancelRefetch: true,\n      throwOnError: options?.throwOnError,\n      meta: {\n        fetchMore: { direction: 'backward', pageParam: options?.pageParam },\n      },\n    })\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, InfiniteData<TQueryData>>,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ): InfiniteQueryObserverResult<TData, TError> {\n    const { state } = query\n    const result = super.createResult(query, options)\n    return {\n      ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, state.data?.pages),\n      hasPreviousPage: hasPreviousPage(options, state.data?.pages),\n      isFetchingNextPage:\n        state.isFetching && state.fetchMeta?.fetchMore?.direction === 'forward',\n      isFetchingPreviousPage:\n        state.isFetching &&\n        state.fetchMeta?.fetchMore?.direction === 'backward',\n    }\n  }\n}\n","import { Action, getDefaultState, Mutation } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport type {\n  MutateOptions,\n  MutationObserverBaseResult,\n  MutationObserverResult,\n  MutationObserverOptions,\n} from './types'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>\n  ) {\n    this.options = this.client.defaultMutationOptions(options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    const result: MutationObserverBaseResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    > = {\n      ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n\n    this.currentResult = result as MutationObserverResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    >\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n","import type { QueryClient } from './queryClient'\nimport type { Query, QueryState } from './query'\nimport type {\n  MutationKey,\n  MutationOptions,\n  QueryKey,\n  QueryOptions,\n} from './types'\nimport type { Mutation, MutationState } from './mutation'\n\n// TYPES\n\nexport interface DehydrateOptions {\n  dehydrateMutations?: boolean\n  dehydrateQueries?: boolean\n  shouldDehydrateMutation?: ShouldDehydrateMutationFunction\n  shouldDehydrateQuery?: ShouldDehydrateQueryFunction\n}\n\nexport interface HydrateOptions {\n  defaultOptions?: {\n    queries?: QueryOptions\n    mutations?: MutationOptions\n  }\n}\n\ninterface DehydratedMutation {\n  mutationKey?: MutationKey\n  state: MutationState\n}\n\ninterface DehydratedQuery {\n  queryHash: string\n  queryKey: QueryKey\n  state: QueryState\n}\n\nexport interface DehydratedState {\n  mutations: DehydratedMutation[]\n  queries: DehydratedQuery[]\n}\n\nexport type ShouldDehydrateQueryFunction = (query: Query) => boolean\n\nexport type ShouldDehydrateMutationFunction = (mutation: Mutation) => boolean\n\n// FUNCTIONS\n\nfunction dehydrateMutation(mutation: Mutation): DehydratedMutation {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n  }\n}\n\n// Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\nfunction dehydrateQuery(query: Query): DehydratedQuery {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n  }\n}\n\nfunction defaultShouldDehydrateMutation(mutation: Mutation) {\n  return mutation.state.isPaused\n}\n\nfunction defaultShouldDehydrateQuery(query: Query) {\n  return query.state.status === 'success'\n}\n\nexport function dehydrate(\n  client: QueryClient,\n  options?: DehydrateOptions\n): DehydratedState {\n  options = options || {}\n\n  const mutations: DehydratedMutation[] = []\n  const queries: DehydratedQuery[] = []\n\n  if (options?.dehydrateMutations !== false) {\n    const shouldDehydrateMutation =\n      options.shouldDehydrateMutation || defaultShouldDehydrateMutation\n\n    client\n      .getMutationCache()\n      .getAll()\n      .forEach(mutation => {\n        if (shouldDehydrateMutation(mutation)) {\n          mutations.push(dehydrateMutation(mutation))\n        }\n      })\n  }\n\n  if (options?.dehydrateQueries !== false) {\n    const shouldDehydrateQuery =\n      options.shouldDehydrateQuery || defaultShouldDehydrateQuery\n\n    client\n      .getQueryCache()\n      .getAll()\n      .forEach(query => {\n        if (shouldDehydrateQuery(query)) {\n          queries.push(dehydrateQuery(query))\n        }\n      })\n  }\n\n  return { mutations, queries }\n}\n\nexport function hydrate(\n  client: QueryClient,\n  dehydratedState: unknown,\n  options?: HydrateOptions\n): void {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return\n  }\n\n  const mutationCache = client.getMutationCache()\n  const queryCache = client.getQueryCache()\n\n  const mutations = (dehydratedState as DehydratedState).mutations || []\n  const queries = (dehydratedState as DehydratedState).queries || []\n\n  mutations.forEach(dehydratedMutation => {\n    mutationCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.mutations,\n        mutationKey: dehydratedMutation.mutationKey,\n      },\n      dehydratedMutation.state\n    )\n  })\n\n  queries.forEach(dehydratedQuery => {\n    const query = queryCache.get(dehydratedQuery.queryHash)\n\n    // Do not hydrate if an existing query exists with newer data\n    if (query) {\n      if (query.state.dataUpdatedAt < dehydratedQuery.state.dataUpdatedAt) {\n        query.setState(dehydratedQuery.state)\n      }\n      return\n    }\n\n    // Restore query\n    queryCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.queries,\n        queryKey: dehydratedQuery.queryKey,\n        queryHash: dehydratedQuery.queryHash,\n      },\n      dehydratedQuery.state\n    )\n  })\n}\n"],"names":["_inheritsLoose","subClass","superClass","prototype","Object","create","constructor","__proto__","Subscribable","listeners","subscribe","listener","callback","push","onSubscribe","_this","filter","x","onUnsubscribe","hasListeners","this","length","_extends","assign","target","i","arguments","source","key","hasOwnProperty","call","apply","isServer","window","noop","isValidTimeout","value","Infinity","ensureQueryKeyArray","Array","isArray","difference","array1","array2","indexOf","timeUntilStale","updatedAt","staleTime","Math","max","Date","now","parseQueryArgs","arg1","arg2","arg3","isQueryKey","queryKey","queryFn","parseFilterArgs","matchQuery","filters","query","active","exact","fetching","inactive","predicate","stale","queryHash","hashQueryKeyByOptions","options","partialMatchKey","queryStatusFilter","mapQueryStatusFilter","isActive","isStale","isFetching","matchMutation","mutation","mutationKey","hashQueryKey","state","status","queryKeyHashFn","asArray","JSON","stringify","_","val","isPlainObject","keys","sort","reduce","result","a","b","partialDeepEqual","some","replaceEqualDeep","array","aSize","bItems","bSize","copy","equalItems","o","hasObjectPrototype","ctor","prot","toString","scheduleMicrotask","Promise","resolve","then","catch","error","setTimeout","focusManager","removeEventListener","setDefaultEventListener","setEventListener","setup","focused","setFocused","onFocus","forEach","isFocused","document","undefined","includes","visibilityState","_window","addEventListener","onlineManager","online","setOnline","onOnline","isOnline","navigator","onLine","defaultRetryDelay","failureCount","min","isCancelable","cancel","CancelledError","revert","silent","isCancelledError","Retryer","config","cancelFn","continueFn","promiseResolve","promiseReject","cancelRetry","cancelOptions","continue","isPaused","isResolved","isTransportCancelable","promise","outerResolve","outerReject","onSuccess","reject","onError","run","promiseOrValue","fn","timeout","retry","retryDelay","delay","shouldRetry","onFail","continueResolve","onPause","onContinue","notifyManager","queue","transactions","notifyFn","batchNotifyFn","batch","flush","schedule","batchCalls","args","_this2","_this3","setNotifyFunction","setBatchNotifyFunction","logger","console","warn","log","getLogger","Query","defaultOptions","setOptions","observers","cache","initialState","getDefaultState","scheduleGc","cacheTime","setDefaultOptions","clearGcTimeout","gcTimeout","optionalRemove","clearTimeout","remove","setData","updater","prevData","data","input","functionalUpdate","isDataEqual","_this$options$isDataE","structuralSharing","dispatch","type","dataUpdatedAt","setState","setStateOptions","retryer","destroy","reset","observer","enabled","isInvalidated","getCurrentResult","isStaleByTime","find","shouldFetchOnWindowFocus","refetch","shouldFetchOnReconnect","addObserver","notify","removeObserver","getObserversCount","invalidate","fetch","fetchOptions","cancelRefetch","queryFnContext","pageParam","context","fetchFn","behavior","_this$options$behavio","onFetch","revertState","fetchMeta","_context$fetchOptions","meta","_context$fetchOptions2","action","reducer","onQueryUpdate","initialData","initialDataUpdatedAt","hasData","dataUpdateCount","errorUpdateCount","errorUpdatedAt","fetchFailureCount","QueryCache","queries","queriesMap","build","client","get","defaultQueryOptions","getQueryDefaults","add","queryInMap","clear","getAll","findAll","event","_this4","_this5","Mutation","mutationId","mutationCache","execute","restored","variables","onMutate","executeMutation","onSettled","mutationFn","onMutationUpdate","MutationCache","mutations","defaultMutationOptions","getMutationDefaults","resumePausedMutations","pausedMutations","infiniteQueryBehavior","refetchPage","fetchMore","_context$fetchOptions3","_context$fetchOptions4","isFetchingNextPage","direction","isFetchingPreviousPage","oldPages","pages","oldPageParams","pageParams","newPageParams","cancelled","buildNewPages","param","page","previous","fetchPage","manual","queryFnResult","getNextPageParam","getPreviousPageParam","shouldFetchFirstPage","finalPromise","hasNextPage","nextPageParam","hasPreviousPage","previousPageParam","QueryClient","queryCache","queryDefaults","mutationDefaults","mount","unsubscribeFocus","unsubscribeOnline","unmount","isMutating","getQueryData","_this$queryCache$find","getQueriesData","queryKeyOrFilters","getQueryCache","map","setQueryData","parsedOptions","defaultedOptions","setQueriesData","getQueryState","_this$queryCache$find2","removeQueries","resetQueries","refetchFilters","refetchQueries","cancelQueries","promises","all","invalidateQueries","refetchActive","refetchInactive","_this6","throwOnError","fetchQuery","prefetchQuery","fetchInfiniteQuery","prefetchInfiniteQuery","cancelMutations","_this7","getMutationCache","getDefaultOptions","setQueryDefaults","_this$queryDefaults$f","setMutationDefaults","_this$mutationDefault","_defaulted","defaultQueryObserverOptions","QueryObserver","trackedProps","previousSelectError","bindMethods","bind","currentQuery","shouldFetchOnMount","executeFetch","updateTimers","refetchOnReconnect","refetchOnWindowFocus","clearTimers","notifyOptions","prevOptions","prevQuery","Error","updateQuery","mounted","shouldFetchOptionally","updateResult","updateStaleTimeout","refetchInterval","updateRefetchInterval","getOptimisticResult","createResult","currentResult","trackResult","trackedResult","defineProperty","configurable","enumerable","typedKey","getNextResult","unsubscribe","isError","getCurrentQuery","fetchOptimistic","clearStaleTimeout","staleTimeoutId","clearRefetchInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","currentQueryInitialState","prevQueryResult","previousQueryResult","isPreviousData","isPlaceholderData","optimisticResults","fetchOnMount","fetchOptionally","keepPreviousData","isSuccess","select","selectError","placeholderData","isLoading","isIdle","isFetched","isFetchedAfterMount","isRefetching","isLoadingError","isRefetchError","shouldNotifyListeners","notifyOnChangeProps","notifyOnChangePropsExclusions","includedProps","changed","isIncluded","isExcluded","shallowEqualObjects","defaultNotifyOptions","_this8","retryOnMount","shouldLoadOnMount","refetchOnMount","shouldRefetchOnMount","suspense","QueriesObserver","observersMap","setQueries","onUpdate","updateObservers","index","getObserver","currentObserver","hasIndexChange","prevObservers","prevObserversMap","newResult","newObservers","newObserversMap","slice","replaceAt","InfiniteQueryObserver","_QueryObserver","fetchNextPage","fetchPreviousPage","_state$data","_state$data2","MutationObserver","mutate","currentMutation","mutateOptions","defaultShouldDehydrateMutation","defaultShouldDehydrateQuery","dehydrateMutations","shouldDehydrateMutation","dehydrateMutation","dehydrateQueries","shouldDehydrateQuery","dehydrateQuery","dehydratedState","dehydratedMutation","_options$defaultOptio","dehydratedQuery","_options$defaultOptio2","newLogger"],"mappings":"4MAAe,SAASA,EAAeC,EAAUC,GAC/CD,EAASE,UAAYC,OAAOC,OAAOH,EAAWC,WAC9CF,EAASE,UAAUG,YAAcL,EACjCA,EAASM,UAAYL,MCDVM,+BAIJC,UAAY,8BAGnBC,UAAA,SAAUC,cACFC,EAAWD,GAAa,yBAEzBF,UAAUI,KAAKD,QAEfE,cAEE,WACLC,EAAKN,UAAYM,EAAKN,UAAUO,QAAO,SAAAC,UAAKA,IAAML,KAClDG,EAAKG,oBAITC,aAAA,kBACSC,KAAKX,UAAUY,OAAS,KAGvBP,YAAV,eAIUI,cAAV,kBC9Ba,SAASI,WACtBA,EAAWlB,OAAOmB,QAAU,SAAUC,OAC/B,IAAIC,EAAI,EAAGA,EAAIC,UAAUL,OAAQI,IAAK,KACrCE,EAASD,UAAUD,OAElB,IAAIG,KAAOD,EACVvB,OAAOD,UAAU0B,eAAeC,KAAKH,EAAQC,KAC/CJ,EAAOI,GAAOD,EAAOC,WAKpBJ,IAGOO,MAAMX,KAAMM,WC2DvB,IAAMM,EAA6B,oBAAXC,OAExB,SAASC,KAaT,SAASC,EAAeC,SACL,iBAAVA,GAAsBA,GAAS,GAAKA,IAAUC,EAAAA,EAGvD,SAASC,EACdF,UAEQG,MAAMC,QAAQJ,GAClBA,EACC,CAACA,GAGD,SAASK,EAAcC,EAAaC,UAClCD,EAAO1B,QAAO,SAAAC,UAA4B,IAAvB0B,EAAOC,QAAQ3B,MASpC,SAAS4B,EAAeC,EAAmBC,UACzCC,KAAKC,IAAIH,GAAaC,GAAa,GAAKG,KAAKC,MAAO,GAGtD,SAASC,EAIdC,EACAC,EACAC,UAEKC,EAAWH,GAII,mBAATC,OACGC,GAAME,SAAUJ,EAAMK,QAASJ,SAGjCA,GAAMG,SAAUJ,IAPnBA,EA+BJ,SAASM,EAIdN,EACAC,EACAC,UAEQC,EAAWH,GACf,MAAMC,GAAMG,SAAUJ,IAAQE,GAC9B,CAACF,GAAQ,GAAIC,GA6BZ,SAASM,EACdC,EACAC,OAGEC,EAOEF,EAPFE,OACAC,EAMEH,EANFG,MACAC,EAKEJ,EALFI,SACAC,EAIEL,EAJFK,SACAC,EAGEN,EAHFM,UACAV,EAEEI,EAFFJ,SACAW,EACEP,EADFO,SAGEZ,EAAWC,MACTO,MACEF,EAAMO,YAAcC,EAAsBb,EAAUK,EAAMS,gBACrD,OAEJ,IAAKC,EAAgBV,EAAML,SAAUA,UACnC,MAILgB,EA3CD,SACLV,EACAG,UAGc,IAAXH,IAAgC,IAAbG,GACT,MAAVH,GAA8B,MAAZG,EAEZ,OACa,IAAXH,IAAiC,IAAbG,EACtB,cAIUH,EAAAA,GAAWG,GACV,SAAW,WA4BLQ,CAAqBX,EAAQG,MAE7B,SAAtBO,SACK,EACF,GAA0B,QAAtBA,EAA6B,KAChCE,EAAWb,EAAMa,cACG,WAAtBF,IAAmCE,SAC9B,KAEiB,aAAtBF,GAAoCE,SAC/B,SAIU,kBAAVP,GAAuBN,EAAMc,YAAcR,MAI9B,kBAAbH,GAA0BH,EAAMe,eAAiBZ,MAIxDE,IAAcA,EAAUL,KAOvB,SAASgB,EACdjB,EACAkB,OAEQf,EAA4CH,EAA5CG,MAAOC,EAAqCJ,EAArCI,SAAUE,EAA2BN,EAA3BM,UAAWa,EAAgBnB,EAAhBmB,eAChCxB,EAAWwB,GAAc,KACtBD,EAASR,QAAQS,mBACb,KAELhB,MAEAiB,EAAaF,EAASR,QAAQS,eAAiBC,EAAaD,UAErD,OAEJ,IAAKR,EAAgBO,EAASR,QAAQS,YAAaA,UACjD,SAKW,kBAAbf,GACoB,YAA1Bc,EAASG,MAAMC,SAA0BlB,MAKxCE,IAAcA,EAAUY,IAOvB,SAAST,EACdb,EACAc,iBAEeA,SAAAA,EAASa,iBAAkBH,GAC5BxB,GAMT,SAASwB,EAAaxB,OAQGrB,EAPxBiD,EAAU/C,EAAoBmB,UAONrB,EANPiD,EAOhBC,KAAKC,UAAUnD,GAAO,SAACoD,EAAGC,UAC/BC,EAAcD,GACVrF,OAAOuF,KAAKF,GACTG,OACAC,QAAO,SAACC,EAAQlE,UACfkE,EAAOlE,GAAO6D,EAAI7D,GACXkE,IACN,IACLL,KAOD,SAASjB,EAAgBuB,EAAaC,UAOtC,SAASC,EAAiBF,EAAQC,MACnCD,IAAMC,SACD,YAGED,UAAaC,SACf,KAGLD,GAAKC,GAAkB,iBAAND,GAA+B,iBAANC,SACpC5F,OAAOuF,KAAKK,GAAGE,MAAK,SAAAtE,UAAQqE,EAAiBF,EAAEnE,GAAMoE,EAAEpE,cAG1D,EAnBAqE,CAAiB3D,EAAoByD,GAAIzD,EAAoB0D,IA4B/D,SAASG,EAAiBJ,EAAQC,MACnCD,IAAMC,SACDD,MAGHK,EAAQ7D,MAAMC,QAAQuD,IAAMxD,MAAMC,QAAQwD,MAE5CI,GAAUV,EAAcK,IAAML,EAAcM,GAAK,SAC7CK,EAAQD,EAAQL,EAAE1E,OAASjB,OAAOuF,KAAKI,GAAG1E,OAC1CiF,EAASF,EAAQJ,EAAI5F,OAAOuF,KAAKK,GACjCO,EAAQD,EAAOjF,OACfmF,EAAYJ,EAAQ,GAAK,GAE3BK,EAAa,EAERhF,EAAI,EAAGA,EAAI8E,EAAO9E,IAAK,KACxBG,EAAMwE,EAAQ3E,EAAI6E,EAAO7E,GAC/B+E,EAAK5E,GAAOuE,EAAiBJ,EAAEnE,GAAMoE,EAAEpE,IACnC4E,EAAK5E,KAASmE,EAAEnE,IAClB6E,WAIGJ,IAAUE,GAASE,IAAeJ,EAAQN,EAAIS,SAGhDR,EAqBF,SAASN,EAAcgB,OACvBC,EAAmBD,UACf,MAIHE,EAAOF,EAAEpG,oBACK,IAATsG,SACF,MAIHC,EAAOD,EAAKzG,kBACbwG,EAAmBE,MAKnBA,EAAKhF,eAAe,iBAQ3B,SAAS8E,EAAmBD,SACmB,oBAAtCtG,OAAOD,UAAU2G,SAAShF,KAAK4E,GAGjC,SAASlD,EAAWpB,SACD,iBAAVA,GAAsBG,MAAMC,QAAQJ,GAiB7C,SAAS2E,EAAkBnG,GAChCoG,QAAQC,UACLC,KAAKtG,GACLuG,OAAM,SAAAC,UACLC,YAAW,iBACHD,YClXDE,EAAe,oGApEhBxG,YAAV,WACOM,KAAKmG,0BACHC,6BAITC,iBAAA,SACEC,cAEItG,KAAKmG,0BACFA,2BAEFA,oBAAsBG,GAAM,SAAAC,GACR,kBAAZA,EACT5G,EAAK6G,WAAWD,GAEhB5G,EAAK8G,gBAKXD,WAAA,SAAWD,QACJA,QAAUA,EAEXA,QACGE,aAITA,QAAA,gBACOpH,UAAUqH,SAAQ,SAAAnH,GACrBA,UAIJoH,UAAA,iBAC8B,kBAAjB3G,KAAKuG,QACPvG,KAAKuG,QAIU,oBAAbK,UAIJ,MAACC,EAAW,UAAW,aAAaC,SACzCF,SAASG,oBAILX,wBAAR,kBACOxF,aAAYC,eAAAmG,EAAQC,wBAClBZ,kBAAiB,SAAAI,OACdlH,EAAW,kBAAMkH,YAEvB5F,OAAOoG,iBAAiB,mBAAoB1H,GAAU,GACtDsB,OAAOoG,iBAAiB,QAAS1H,GAAU,GAEpC,WAELsB,OAAOsF,oBAAoB,mBAAoB5G,GAC/CsB,OAAOsF,oBAAoB,QAAS5G,WAjEnBH,ICwEd8H,EAAgB,oGApEjBxH,YAAV,WACOM,KAAKmG,0BACHC,6BAITC,iBAAA,SACEC,cAEItG,KAAKmG,0BACFA,2BAEFA,oBAAsBG,GAAM,SAACa,GACV,kBAAXA,EACTxH,EAAKyH,UAAUD,GAEfxH,EAAK0H,iBAKXD,UAAA,SAAUD,QACHA,OAASA,EAEVA,QACGE,cAITA,SAAA,gBACOhI,UAAUqH,SAAQ,SAAAnH,GACrBA,UAIJ+H,SAAA,iBAC6B,kBAAhBtH,KAAKmH,OACPnH,KAAKmH,OAIS,oBAAdI,gBACqB,IAArBA,UAAUC,QAKZD,UAAUC,UAGXpB,wBAAR,kBACOxF,aAAYC,eAAAmG,EAAQC,wBAClBZ,kBAAiB,SAAAgB,OACd9H,EAAW,kBAAM8H,YAEvBxG,OAAOoG,iBAAiB,SAAU1H,GAAU,GAC5CsB,OAAOoG,iBAAiB,UAAW1H,GAAU,GAEtC,WAELsB,OAAOsF,oBAAoB,SAAU5G,GACrCsB,OAAOsF,oBAAoB,UAAW5G,WAjEpBH,IC4B5B,SAASqI,EAAkBC,UAClB9F,KAAK+F,IAAI,aAAO,EAAKD,GAAc,KAOrC,SAASE,EAAa5G,SACK,yBAAlBA,SAAAA,EAAO6G,YAQVC,EAGX,SAAY3E,QACL4E,aAAS5E,SAAAA,EAAS4E,YAClBC,aAAS7E,SAAAA,EAAS6E,QAIpB,SAASC,EAAiBjH,UACxBA,aAAiB8G,MAKbI,EAUX,SAAYC,OAENC,EACAC,EACAC,EACAC,SAJAC,GAAc,OAMbX,OAAS,SAAAY,gBAAiBL,SAAAA,EAAWK,SACrCD,YAAc,WACjBA,GAAc,QAEXE,SAAW,wBAAML,SAAAA,UACjBX,aAAe,OACfiB,UAAW,OACXC,YAAa,OACbC,uBAAwB,OACxBC,QAAU,IAAIlD,SAAe,SAACmD,EAAcC,GAC/CV,EAAiBS,EACjBR,EAAgBS,SAGZnD,EAAU,SAAC7E,GACVrB,EAAKiJ,aACRjJ,EAAKiJ,YAAa,QAClBT,EAAOc,WAAPd,EAAOc,UAAYjI,SACnBqH,GAAAA,IACAC,EAAetH,KAIbkI,EAAS,SAAClI,GACTrB,EAAKiJ,aACRjJ,EAAKiJ,YAAa,QAClBT,EAAOgB,SAAPhB,EAAOgB,QAAUnI,SACjBqH,GAAAA,IACAE,EAAcvH,MAiBN,SAANoI,QAEAzJ,EAAKiJ,gBAILS,MAIFA,EAAiBlB,EAAOmB,KACxB,MAAOtD,GACPqD,EAAiBzD,QAAQsD,OAAOlD,GAIlCoC,EAAW,SAAAK,OACJ9I,EAAKiJ,aACRM,EAAO,IAAIpB,EAAeW,IAGtBb,EAAayB,QAEbA,EAAexB,SACf,YAMRlI,EAAKkJ,sBAAwBjB,EAAayB,GAE1CzD,QAAQC,QAAQwD,GACbvD,KAAKD,GACLE,OAAM,SAAAC,eAEDrG,EAAKiJ,gBH6QGW,EGxQNC,WAAQrB,EAAOqB,SAAS,EACxBC,WAAatB,EAAOsB,cAAchC,EAClCiC,EACkB,mBAAfD,EACHA,EAAW9J,EAAK+H,aAAc1B,GAC9ByD,EACAE,GACM,IAAVH,GACkB,iBAAVA,GAAsB7J,EAAK+H,aAAe8B,GAChC,mBAAVA,GAAwBA,EAAM7J,EAAK+H,aAAc1B,OAEvDwC,GAAgBmB,EAMpBhK,EAAK+H,qBAGLS,EAAOyB,QAAPzB,EAAOyB,OAASjK,EAAK+H,aAAc1B,IHoPvBuD,EGjPNG,EHkPP,IAAI9D,SAAQ,SAAAC,GACjBI,WAAWJ,EAAS0D,OGjPXzD,MAAK,eACCI,EAAaS,cAAgBO,EAAcI,kBA/EjD,IAAI1B,SAAQ,SAAAiE,GACjBxB,EAAawB,EACblK,EAAKgJ,UAAW,QAChBR,EAAO2B,SAAP3B,EAAO2B,aACNhE,MAAK,WACNuC,OAAaxB,EACblH,EAAKgJ,UAAW,QAChBR,EAAO4B,YAAP5B,EAAO4B,mBA4EFjE,MAAK,WACA0C,EACFU,EAAOlD,GAEPoD,YArBJF,EAAOlD,QA4BfoD,IChHSY,EAAgB,iCA5EpBC,MAAQ,QACRC,aAAe,OAEfC,SAAW,SAAC3K,GACfA,UAGG4K,cAAgB,SAAC5K,GACpBA,gCAIJ6K,MAAA,SAAS7K,QACF0K,mBACCxF,EAASlF,gBACV0K,eACAlK,KAAKkK,mBACHI,QAEA5F,KAGT6F,SAAA,SAAS/K,cACHQ,KAAKkK,kBACFD,MAAMxK,KAAKD,GAEhBmG,GAAkB,WAChBhG,EAAKwK,SAAS3K,SAQpBgL,WAAA,SAA+BhL,qBACrB,sCAAIiL,2BAAAA,kBACVC,EAAKH,UAAS,WACZ/K,eAAYiL,UAKlBH,MAAA,sBACQL,EAAQjK,KAAKiK,WACdA,MAAQ,GACTA,EAAMhK,QACR0F,GAAkB,WAChBgF,EAAKP,eAAc,WACjBH,EAAMvD,SAAQ,SAAAlH,GACZmL,EAAKR,SAAS3K,eAWxBoL,kBAAA,SAAkBtB,QACXa,SAAWb,KAOlBuB,uBAAA,SAAuBvB,QAChBc,cAAgBd,SC3ErBwB,EAAiBC,SAAW,CAC9B/E,MAAOlF,EACPkK,KAAMlK,EACNmK,IAAKnK,GAGA,SAASoK,WACPJ,MCwHIK,wBAqBChD,QACLiD,eAAiBjD,EAAOiD,oBACxBC,WAAWlD,EAAOhF,cAClBmI,UAAY,QACZC,MAAQpD,EAAOoD,WACflJ,SAAW8F,EAAO9F,cAClBY,UAAYkF,EAAOlF,eACnBuI,aAAerD,EAAOrE,OAAS9D,KAAKyL,gBAAgBzL,KAAKmD,cACzDW,MAAQ9D,KAAKwL,kBACbE,wCAGCL,WAAR,SACElI,cAEKA,aAAenD,KAAKoL,eAAmBjI,QAGvCwI,UAAY/J,KAAKC,IACpB7B,KAAK2L,WAAa,WAClB3L,KAAKmD,QAAQwI,aAAa,QAI9BC,kBAAA,SACEzI,QAEKiI,eAAiBjI,KAGhBuI,WAAR,2BACOG,iBAED9K,EAAef,KAAK2L,kBACjBG,UAAY7F,YAAW,WAC1BtG,EAAKoM,mBACJ/L,KAAK2L,eAIJE,eAAR,WACEG,aAAahM,KAAK8L,gBACbA,eAAYjF,KAGXkF,eAAR,WACO/L,KAAKsL,UAAUrL,QAAWD,KAAK8D,MAAML,iBACnC8H,MAAMU,OAAOjM,SAItBkM,QAAA,SACEC,EACAhJ,WAEMiJ,EAAWpM,KAAK8D,MAAMuI,KAGxBA,EN5ID,SACLF,EACAG,SAE0B,mBAAZH,EACTA,EAAgDG,GACjDH,EMsISI,CAAiBJ,EAASC,2BAG5BjJ,SAAQqJ,oBAAbC,SAA2BL,EAAUC,IACvCA,EAAOD,GACqC,IAAnCpM,KAAKmD,QAAQuJ,oBAEtBL,EAAOtH,EAAiBqH,EAAUC,SAI/BM,SAAS,CACZN,KAAAA,EACAO,KAAM,UACNC,oBAAe1J,SAAAA,EAASzB,YAGnB2K,KAGTS,SAAA,SACEhJ,EACAiJ,QAEKJ,SAAS,CAAEC,KAAM,WAAY9I,MAAAA,EAAOiJ,gBAAAA,OAG3ClF,OAAA,SAAO1E,SACC2F,EAAU9I,KAAK8I,6BAChBkE,YAASnF,OAAO1E,GACd2F,EAAUA,EAAQhD,KAAKhF,GAAMiF,MAAMjF,GAAQ8E,QAAQC,aAG5DoH,QAAA,gBACOpB,sBACAhE,OAAO,CAAEG,QAAQ,OAGxBkF,MAAA,gBACOD,eACAH,SAAS9M,KAAKwL,iBAGrBjI,SAAA,kBACSvD,KAAKsL,UAAUxG,MAAK,SAAAqI,UAAyC,IAA7BA,EAAShK,QAAQiK,cAG1D3J,WAAA,kBACSzD,KAAK8D,MAAML,cAGpBD,QAAA,kBAEIxD,KAAK8D,MAAMuJ,gBACVrN,KAAK8D,MAAM+I,eACZ7M,KAAKsL,UAAUxG,MAAK,SAAAqI,UAAYA,EAASG,mBAAmB9J,cAIhE+J,cAAA,SAAc5L,mBAAAA,IAAAA,EAAY,GAEtB3B,KAAK8D,MAAMuJ,gBACVrN,KAAK8D,MAAM+I,gBACXpL,EAAezB,KAAK8D,MAAM+I,cAAelL,MAI9C8E,QAAA,iBACQ0G,EAAWnN,KAAKsL,UAAUkC,MAAK,SAAA3N,UAAKA,EAAE4N,8BAExCN,GACFA,EAASO,wBAINV,YAAStE,cAGhBrB,SAAA,iBACQ8F,EAAWnN,KAAKsL,UAAUkC,MAAK,SAAA3N,UAAKA,EAAE8N,4BAExCR,GACFA,EAASO,wBAINV,YAAStE,cAGhBkF,YAAA,SAAYT,IACgC,IAAtCnN,KAAKsL,UAAU9J,QAAQ2L,UACpB7B,UAAU7L,KAAK0N,QAGftB,sBAEAN,MAAMsC,OAAO,CAAEjB,KAAM,gBAAiBlK,MAAO1C,KAAMmN,SAAAA,QAI5DW,eAAA,SAAeX,IAC6B,IAAtCnN,KAAKsL,UAAU9J,QAAQ2L,UACpB7B,UAAYtL,KAAKsL,UAAU1L,QAAO,SAAAC,UAAKA,IAAMsN,KAE7CnN,KAAKsL,UAAUrL,SAGdD,KAAKgN,UACHhN,KAAKgN,QAAQnE,2BACVmE,QAAQnF,OAAO,CAAEE,QAAQ,SAEzBiF,QAAQxE,eAIbxI,KAAK2L,eACFD,kBAEAH,MAAMU,OAAOjM,YAIjBuL,MAAMsC,OAAO,CAAEjB,KAAM,kBAAmBlK,MAAO1C,KAAMmN,SAAAA,QAI9DY,kBAAA,kBACS/N,KAAKsL,UAAUrL,UAGxB+N,WAAA,WACOhO,KAAK8D,MAAMuJ,oBACTV,SAAS,CAAEC,KAAM,kBAI1BqB,MAAA,SACE9K,EACA+K,qBAEIlO,KAAK8D,MAAML,cACTzD,KAAK8D,MAAM+I,sBAAiBqB,SAAAA,EAAcC,oBAEvCtG,OAAO,CAAEG,QAAQ,SACjB,GAAIhI,KAAK8I,eAEP9I,KAAK8I,WAKZ3F,QACGkI,WAAWlI,IAKbnD,KAAKmD,QAAQb,QAAS,KACnB6K,EAAWnN,KAAKsL,UAAUkC,MAAK,SAAA3N,UAAKA,EAAEsD,QAAQb,WAChD6K,QACG9B,WAAW8B,EAAShK,iBAIvBd,EAAWnB,EAAoBlB,KAAKqC,UAGpC+L,EAAkD,CACtD/L,SAAAA,EACAgM,eAAWxH,GAUPyH,EAAgE,CACpEJ,aAAAA,EACA/K,QAASnD,KAAKmD,QACdd,SAAUA,EACVyB,MAAO9D,KAAK8D,MACZyK,QAXc,kBACd7D,EAAKvH,QAAQb,QACToI,EAAKvH,QAAQb,QAAQ8L,GACrBxI,QAAQsD,OAAO,+BAWjBlJ,KAAKmD,QAAQqL,iBAAbC,EAAuBC,yBACpBvL,QAAQqL,aAAUE,QAAQJ,UAI5BK,YAAc3O,KAAK8D,MAIrB9D,KAAK8D,MAAML,YACZzD,KAAK8D,MAAM8K,sBAAcN,EAAQJ,qBAARW,EAAsBC,aAE1CnC,SAAS,CAAEC,KAAM,QAASkC,cAAMR,EAAQJ,qBAARa,EAAsBD,mBAIxD9B,QAAU,IAAI9E,EAAQ,CACzBoB,GAAIgF,EAAQC,QACZtF,UAAW,SAAAoD,GACT3B,EAAKwB,QAAQG,SAGb3B,EAAKa,MAAMpD,OAAOc,WAAlByB,EAAKa,MAAMpD,OAAOc,UAAYoD,EAAM3B,GAGb,IAAnBA,EAAKiB,WACPjB,EAAKqB,kBAGT5C,QAAS,SAACnD,GAEFiC,EAAiBjC,IAAUA,EAAMgC,QACrC0C,EAAKiC,SAAS,CACZC,KAAM,QACN5G,MAAOA,IAINiC,EAAiBjC,WAEpB0E,EAAKa,MAAMpD,OAAOgB,SAAlBuB,EAAKa,MAAMpD,OAAOgB,QAAUnD,EAAO0E,GAGnCQ,IAAYlF,MAAMA,IAIG,IAAnB0E,EAAKiB,WACPjB,EAAKqB,kBAGTnC,OAAQ,WACNc,EAAKiC,SAAS,CAAEC,KAAM,YAExB9C,QAAS,WACPY,EAAKiC,SAAS,CAAEC,KAAM,WAExB7C,WAAY,WACVW,EAAKiC,SAAS,CAAEC,KAAM,cAExBpD,MAAO8E,EAAQnL,QAAQqG,MACvBC,WAAY6E,EAAQnL,QAAQsG,kBAGzBX,QAAU9I,KAAKgN,QAAQlE,QAErB9I,KAAK8I,WAGN6D,SAAR,SAAiBqC,mBACVlL,MAAQ9D,KAAKiP,QAAQjP,KAAK8D,MAAOkL,GAEtChF,EAAcK,OAAM,WAClBM,EAAKW,UAAU5E,SAAQ,SAAAyG,GACrBA,EAAS+B,cAAcF,MAGzBrE,EAAKY,MAAMsC,OAAO,CAAEnL,MAAOiI,EAAMiC,KAAM,eAAgBoC,OAAAA,UAIjDvD,gBAAV,SACEtI,OAEMkJ,EAC2B,mBAAxBlJ,EAAQgM,YACVhM,EAAQgM,cACThM,EAAQgM,YAIRC,OAFgD,IAAxBjM,EAAQgM,YAGM,mBAAjChM,EAAQiM,qBACZjM,EAAQiM,uBACTjM,EAAQiM,qBACV,EAEEC,OAA0B,IAAThD,QAEhB,CACLA,KAAAA,EACAiD,gBAAiB,EACjBzC,cAAewC,QAAUD,EAAAA,EAAwBtN,KAAKC,MAAQ,EAC9DiE,MAAO,KACPuJ,iBAAkB,EAClBC,eAAgB,EAChBC,kBAAmB,EACnBb,UAAW,KACXnL,YAAY,EACZ4J,eAAe,EACf1E,UAAU,EACV5E,OAAQsL,EAAU,UAAY,WAIxBJ,QAAV,SACEnL,EACAkL,kBAEQA,EAAOpC,UACR,qBAEE9I,GACH2L,kBAAmB3L,EAAM2L,kBAAoB,QAE5C,oBAEE3L,GACH6E,UAAU,QAET,uBAEE7E,GACH6E,UAAU,QAET,oBAEE7E,GACH2L,kBAAmB,EACnBb,mBAAWI,EAAOF,QAAQ,KAC1BrL,YAAY,EACZkF,UAAU,EACV5E,OAASD,EAAM+I,cAA4B/I,EAAMC,OAAlB,gBAE9B,sBAEED,GACHuI,KAAM2C,EAAO3C,KACbiD,gBAAiBxL,EAAMwL,gBAAkB,EACzCzC,uBAAemC,EAAOnC,iBAAiB/K,KAAKC,MAC5CiE,MAAO,KACPyJ,kBAAmB,EACnBhM,YAAY,EACZ4J,eAAe,EACf1E,UAAU,EACV5E,OAAQ,gBAEP,YACGiC,EAAQgJ,EAAOhJ,aAEjBiC,EAAiBjC,IAAUA,EAAM+B,QAAU/H,KAAK2O,iBACtC3O,KAAK2O,kBAId7K,GACHkC,MAAOA,EACPuJ,iBAAkBzL,EAAMyL,iBAAmB,EAC3CC,eAAgB1N,KAAKC,MACrB0N,kBAAmB3L,EAAM2L,kBAAoB,EAC7ChM,YAAY,EACZkF,UAAU,EACV5E,OAAQ,cAEP,yBAEED,GACHuJ,eAAe,QAEd,uBAEEvJ,EACAkL,EAAOlL,sBAGLA,SC3gBF4L,yBAMCvH,sCAELA,OAASA,GAAU,KACnBwH,QAAU,KACVC,WAAa,uCAGpBC,MAAA,SACEC,EACA3M,EACAW,SAEMzB,EAAWc,EAAQd,SACnBY,WACJE,EAAQF,aAAaC,EAAsBb,EAAUc,GACnDT,EAAQ1C,KAAK+P,IAA4C9M,UAExDP,IACHA,EAAQ,IAAIyI,EAAM,CAChBI,MAAOvL,KACPqC,SAAAA,EACAY,UAAAA,EACAE,QAAS2M,EAAOE,oBAAoB7M,GACpCW,MAAAA,EACAsH,eAAgB0E,EAAOG,iBAAiB5N,UAErC6N,IAAIxN,IAGJA,KAGTwN,IAAA,SAAIxN,GACG1C,KAAK4P,WAAWlN,EAAMO,kBACpB2M,WAAWlN,EAAMO,WAAaP,OAC9BiN,QAAQlQ,KAAKiD,QACbmL,OAAO,CACVjB,KAAM,aACNlK,MAAAA,QAKNuJ,OAAA,SAAOvJ,OACCyN,EAAanQ,KAAK4P,WAAWlN,EAAMO,WAErCkN,IACFzN,EAAMuK,eAED0C,QAAU3P,KAAK2P,QAAQ/P,QAAO,SAAAC,UAAKA,IAAM6C,KAE1CyN,IAAezN,UACV1C,KAAK4P,WAAWlN,EAAMO,gBAG1B4K,OAAO,CAAEjB,KAAM,eAAgBlK,MAAAA,QAIxC0N,MAAA,sBACEpG,EAAcK,OAAM,WAClBK,EAAKiF,QAAQjJ,SAAQ,SAAAhE,GACnBgI,EAAKuB,OAAOvJ,YAKlBqN,IAAA,SAME9M,UAEOjD,KAAK4P,WAAW3M,MAGzBoN,OAAA,kBACSrQ,KAAK2P,WAGdnC,KAAA,SACEvL,EACAC,OAEOO,EAAWF,EAAgBN,EAAMC,kBAEX,IAAlBO,EAAQG,QACjBH,EAAQG,OAAQ,GAGX5C,KAAK2P,QAAQnC,MAAK,SAAA9K,UAASF,EAAWC,EAASC,SAMxD4N,QAAA,SAAQrO,EAAgCC,OAC/BO,EAAWF,EAAgBN,EAAMC,aACjCO,EACHzC,KAAK2P,QAAQ/P,QAAO,SAAA8C,UAASF,EAAWC,EAASC,MACjD1C,KAAK2P,WAGX9B,OAAA,SAAO0C,cACLvG,EAAcK,OAAM,WAClBM,EAAKtL,UAAUqH,SAAQ,SAAAnH,GACrBA,EAASgR,YAKf9J,QAAA,sBACEuD,EAAcK,OAAM,WAClBmG,EAAKb,QAAQjJ,SAAQ,SAAAhE,GACnBA,EAAM+D,mBAKZY,SAAA,sBACE2C,EAAcK,OAAM,WAClBoG,EAAKd,QAAQjJ,SAAQ,SAAAhE,GACnBA,EAAM2E,qBAlIkBjI,GCQnBsR,wBAcCvI,QACLhF,aACAgF,EAAOiD,eACPjD,EAAOhF,cAEPwN,WAAaxI,EAAOwI,gBACpBC,cAAgBzI,EAAOyI,mBACvBtF,UAAY,QACZxH,MAAQqE,EAAOrE,OAAS2H,+BAG/BqB,SAAA,SAAShJ,QACF6I,SAAS,CAAEC,KAAM,WAAY9I,MAAAA,OAGpC8J,YAAA,SAAYT,IACgC,IAAtCnN,KAAKsL,UAAU9J,QAAQ2L,SACpB7B,UAAU7L,KAAK0N,MAIxBW,eAAA,SAAeX,QACR7B,UAAYtL,KAAKsL,UAAU1L,QAAO,SAAAC,UAAKA,IAAMsN,QAGpDtF,OAAA,kBACM7H,KAAKgN,cACFA,QAAQnF,SACN7H,KAAKgN,QAAQlE,QAAQhD,KAAKhF,GAAMiF,MAAMjF,IAExC8E,QAAQC,aAGjB6C,SAAA,kBACM1I,KAAKgN,cACFA,QAAQtE,WACN1I,KAAKgN,QAAQlE,SAEf9I,KAAK6Q,aAGdA,QAAA,eACMxE,SAEEyE,EAAiC,YAAtB9Q,KAAK8D,MAAMC,OAExB+E,EAAUlD,QAAQC,iBAEjBiL,SACEnE,SAAS,CAAEC,KAAM,UAAWmE,UAAW/Q,KAAKmD,QAAQ4N,YACzDjI,EAAUA,EACPhD,MAAK,wBAAMnG,EAAKwD,QAAQ6N,gBAAbrR,EAAKwD,QAAQ6N,SAAWrR,EAAKmE,MAAMiN,cAC9CjL,MAAK,SAAAwI,GACAA,IAAY3O,EAAKmE,MAAMwK,SACzB3O,EAAKgN,SAAS,CACZC,KAAM,UACN0B,QAAAA,EACAyC,UAAWpR,EAAKmE,MAAMiN,gBAMzBjI,EACJhD,MAAK,kBAAMnG,EAAKsR,qBAChBnL,MAAK,SAAApB,GACJ2H,EAAO3H,QAEP/E,EAAKiR,cAAczI,OAAOc,WAA1BtJ,EAAKiR,cAAczI,OAAOc,UACxBoD,EACA1M,EAAKmE,MAAMiN,UACXpR,EAAKmE,MAAMwK,QACX3O,MAGHmG,MAAK,wBACJnG,EAAKwD,QAAQ8F,iBAAbtJ,EAAKwD,QAAQ8F,UACXoD,EACA1M,EAAKmE,MAAMiN,UACXpR,EAAKmE,MAAMwK,YAGdxI,MAAK,wBACJnG,EAAKwD,QAAQ+N,iBAAbvR,EAAKwD,QAAQ+N,UACX7E,EACA,KACA1M,EAAKmE,MAAMiN,UACXpR,EAAKmE,MAAMwK,YAGdxI,MAAK,kBACJnG,EAAKgN,SAAS,CAAEC,KAAM,UAAWP,KAAAA,IAC1BA,KAERtG,OAAM,SAAAC,gBAELrG,EAAKiR,cAAczI,OAAOgB,SAA1BxJ,EAAKiR,cAAczI,OAAOgB,QACxBnD,EACArG,EAAKmE,MAAMiN,UACXpR,EAAKmE,MAAMwK,QACX3O,GAIFuL,IAAYlF,MAAMA,GAEXJ,QAAQC,UACZC,MAAK,wBACJnG,EAAKwD,QAAQgG,eAAbxJ,EAAKwD,QAAQgG,QACXnD,EACArG,EAAKmE,MAAMiN,UACXpR,EAAKmE,MAAMwK,YAGdxI,MAAK,wBACJnG,EAAKwD,QAAQ+N,iBAAbvR,EAAKwD,QAAQ+N,eACXrK,EACAb,EACArG,EAAKmE,MAAMiN,UACXpR,EAAKmE,MAAMwK,YAGdxI,MAAK,iBACJnG,EAAKgN,SAAS,CAAEC,KAAM,QAAS5G,MAAAA,IACzBA,WAKRiL,gBAAR,oCACOjE,QAAU,IAAI9E,EAAQ,CACzBoB,GAAI,kBACGoB,EAAKvH,QAAQgO,WAGXzG,EAAKvH,QAAQgO,WAAWzG,EAAK5G,MAAMiN,WAFjCnL,QAAQsD,OAAO,wBAI1BU,OAAQ,WACNc,EAAKiC,SAAS,CAAEC,KAAM,YAExB9C,QAAS,WACPY,EAAKiC,SAAS,CAAEC,KAAM,WAExB7C,WAAY,WACVW,EAAKiC,SAAS,CAAEC,KAAM,cAExBpD,eAAOxJ,KAAKmD,QAAQqG,SAAS,EAC7BC,WAAYzJ,KAAKmD,QAAQsG,aAGpBzJ,KAAKgN,QAAQlE,WAGd6D,SAAR,SAAiBqC,mBACVlL,MA4BT,SACEA,EACAkL,UAEQA,EAAOpC,UACR,qBAEE9I,GACH4D,aAAc5D,EAAM4D,aAAe,QAElC,oBAEE5D,GACH6E,UAAU,QAET,uBAEE7E,GACH6E,UAAU,QAET,sBAEE7E,GACHwK,QAASU,EAAOV,QAChBjC,UAAMxF,EACNb,MAAO,KACP2C,UAAU,EACV5E,OAAQ,UACRgN,UAAW/B,EAAO+B,gBAEjB,sBAEEjN,GACHuI,KAAM2C,EAAO3C,KACbrG,MAAO,KACPjC,OAAQ,UACR4E,UAAU,QAET,oBAEE7E,GACHuI,UAAMxF,EACNb,MAAOgJ,EAAOhJ,MACd0B,aAAc5D,EAAM4D,aAAe,EACnCiB,UAAU,EACV5E,OAAQ,cAEP,uBAEED,EACAkL,EAAOlL,sBAGLA,GAjFImL,CAAQjP,KAAK8D,MAAOkL,GAEjChF,EAAcK,OAAM,WAClBM,EAAKW,UAAU5E,SAAQ,SAAAyG,GACrBA,EAASiE,iBAAiBpC,MAE5BrE,EAAKiG,cAAc/C,OAAOlD,YAKzB,SAASc,UAMP,CACL6C,aAASzH,EACTwF,UAAMxF,EACNb,MAAO,KACP0B,aAAc,EACdiB,UAAU,EACV5E,OAAQ,OACRgN,eAAWlK,OCjPFwK,yBAMClJ,sCAELA,OAASA,GAAU,KACnBmJ,UAAY,KACZX,WAAa,sCAGpBd,MAAA,SACEC,EACA3M,EACAW,OAEMH,EAAW,IAAI+M,EAAS,CAC5BE,cAAe5Q,KACf2Q,aAAc3Q,KAAK2Q,WACnBxN,QAAS2M,EAAOyB,uBAAuBpO,GACvCW,MAAAA,EACAsH,eAAgBjI,EAAQS,YACpBkM,EAAO0B,oBAAoBrO,EAAQS,kBACnCiD,gBAGDqJ,IAAIvM,GAEFA,KAGTuM,IAAA,SAAIvM,QACG2N,UAAU7R,KAAKkE,QACfkK,OAAOlK,MAGdsI,OAAA,SAAOtI,QACA2N,UAAYtR,KAAKsR,UAAU1R,QAAO,SAAAC,UAAKA,IAAM8D,KAClDA,EAASkE,cACJgG,OAAOlK,MAGdyM,MAAA,sBACEpG,EAAcK,OAAM,WAClBK,EAAK4G,UAAU5K,SAAQ,SAAA/C,GACrB+G,EAAKuB,OAAOtI,YAKlB0M,OAAA,kBACSrQ,KAAKsR,aAGd9D,KAAA,SACE/K,eAE6B,IAAlBA,EAAQG,QACjBH,EAAQG,OAAQ,GAGX5C,KAAKsR,UAAU9D,MAAK,SAAA7J,UAAYD,EAAcjB,EAASkB,SAGhE2M,QAAA,SAAQ7N,UACCzC,KAAKsR,UAAU1R,QAAO,SAAA+D,UAAYD,EAAcjB,EAASkB,SAGlEkK,OAAA,SAAOlK,cACLqG,EAAcK,OAAM,WAClBM,EAAKtL,UAAUqH,SAAQ,SAAAnH,GACrBA,EAASoE,YAKf8C,QAAA,gBACOgL,2BAGPpK,SAAA,gBACOoK,2BAGPA,sBAAA,eACQC,EAAkB1R,KAAKsR,UAAU1R,QAAO,SAAAC,UAAKA,EAAEiE,MAAM6E,mBACpDqB,EAAcK,OAAM,kBACzBqH,EAAgBjN,QACd,SAACqE,EAASnF,UACRmF,EAAQhD,MAAK,kBAAMnC,EAAS+E,WAAW3C,MAAMjF,QAC/C8E,QAAQC,kBA5FmBzG,GCnB5B,SAASuS,UAKP,CACLjD,QAAS,SAAAJ,GACPA,EAAQC,QAAU,2BA8DZzF,EA7DE8I,WACJtD,EAAQJ,wBAARW,EAAsBC,aAAtBC,EAA4B6C,YACxBC,WAAYvD,EAAQJ,wBAAR4D,EAAsBhD,aAAtBiD,EAA4BF,UACxCxD,QAAYwD,SAAAA,EAAWxD,UACvB2D,EAA8C,mBAAzBH,SAAAA,EAAWI,WAChCC,EAAkD,oBAAzBL,SAAAA,EAAWI,WACpCE,YAAW7D,EAAQxK,MAAMuI,eAAM+F,QAAS,GACxCC,YAAgB/D,EAAQxK,MAAMuI,eAAMiG,aAAc,GACpDC,EAAgBF,EAChBG,GAAY,EAGVlQ,EACJgM,EAAQnL,QAAQb,SAAY,kBAAMsD,QAAQsD,OAAO,oBAE7CuJ,EAAgB,SACpBL,EACAM,EACAC,EACAC,UAEAL,EAAgBK,GACXF,UAAUH,aACPA,GAAeG,IAChBE,GAAYD,UAASP,aAAaA,GAAOO,KAI5CE,EAAY,SAChBT,EACAU,EACAJ,EACAE,MAEIJ,SACK5M,QAAQsD,OAAO,qBAGH,IAAVwJ,IAA0BI,GAAUV,EAAMnS,cAC5C2F,QAAQC,QAAQuM,OAGnBhE,EAAuC,CAC3C/L,SAAUiM,EAAQjM,SAClBgM,UAAWqE,GAGPK,EAAgBzQ,EAAQ8L,GAExBtF,EAAUlD,QAAQC,QAAQkN,GAAejN,MAAK,SAAA6M,UAClDF,EAAcL,EAAOM,EAAOC,EAAMC,MAGhChL,EAAamL,KACMjK,EACRjB,OAASkL,EAAclL,eAG/BiB,MAMJqJ,EAASlS,OAKT,GAAI+R,EAAoB,KACrBc,OAA8B,IAAdzE,EAChBqE,EAAQI,EACVzE,EACA2E,EAAiB1E,EAAQnL,QAASgP,GACtCrJ,EAAU+J,EAAUV,EAAUW,EAAQJ,QAInC,GAAIR,EAAwB,KACzBY,OAA8B,IAAdzE,EAChBqE,EAAQI,EACVzE,EACA4E,EAAqB3E,EAAQnL,QAASgP,GAC1CrJ,EAAU+J,EAAUV,EAAUW,EAAQJ,GAAO,mBAK7CH,EAAgB,OAEVO,OAAqD,IAArCxE,EAAQnL,QAAQ6P,iBAEhCE,GACJtB,IAAeO,EAAS,IACpBP,EAAYO,EAAS,GAAI,EAAGA,GAIlCrJ,EAAUoK,EACNL,EAAU,GAAIC,EAAQT,EAAc,IACpCzM,QAAQC,QAAQ4M,EAAc,GAAIJ,EAAc,GAAIF,EAAS,wBAGxD9R,GACPyI,EAAUA,EAAQhD,MAAK,SAAAsM,OAEnBR,IAAeO,EAAS9R,IACpBuR,EAAYO,EAAS9R,GAAIA,EAAG8R,GAGT,KACjBO,EAAQI,EACVT,EAAchS,GACd2S,EAAiB1E,EAAQnL,QAASiP,UAC/BS,EAAUT,EAAOU,EAAQJ,UAE3B9M,QAAQC,QACb4M,EAAcL,EAAOC,EAAchS,GAAI8R,EAAS9R,SAd7CA,EAAI,EAAGA,EAAI8R,EAASlS,OAAQI,MAA5BA,WAtCTyI,EAAU+J,EAAU,QA0DhBM,EAAerK,EAAQhD,MAAK,SAAAsM,SAAU,CAC1CA,MAAAA,EACAE,WAAYC,aAGYY,EAERtL,OAAS,WACzB2K,GAAY,EACR5K,EAAakB,IACfA,EAAQjB,UAILsL,KAMR,SAASH,EACd7P,EACAiP,gBAEOjP,EAAQ6P,wBAAR7P,EAAQ6P,iBAAmBZ,EAAMA,EAAMnS,OAAS,GAAImS,GAGtD,SAASa,EACd9P,EACAiP,gBAEOjP,EAAQ8P,4BAAR9P,EAAQ8P,qBAAuBb,EAAM,GAAIA,GAO3C,SAASgB,EACdjQ,EACAiP,MAEIjP,EAAQ6P,kBAAoB7R,MAAMC,QAAQgR,GAAQ,KAC9CiB,EAAgBL,EAAiB7P,EAASiP,UAE9C,MAAOiB,IAEW,IAAlBA,GASC,SAASC,EACdnQ,EACAiP,MAEIjP,EAAQ8P,sBAAwB9R,MAAMC,QAAQgR,GAAQ,KAClDmB,EAAoBN,EAAqB9P,EAASiP,UAEtD,MAAOmB,IAEe,IAAtBA,OClJOC,wBASCrL,YAAAA,IAAAA,EAA4B,SACjCsL,WAAatL,EAAOsL,YAAc,IAAI/D,OACtCkB,cAAgBzI,EAAOyI,eAAiB,IAAIS,OAC5CjG,eAAiBjD,EAAOiD,gBAAkB,QAC1CsI,cAAgB,QAChBC,iBAAmB,8BAG1BC,MAAA,2BACOC,iBAAmB3N,EAAa5G,WAAU,WACzC4G,EAAaS,aAAeO,EAAcI,aAC5C3H,EAAKiR,cAAcnK,UACnB9G,EAAK8T,WAAWhN,mBAGfqN,kBAAoB5M,EAAc5H,WAAU,WAC3C4G,EAAaS,aAAeO,EAAcI,aAC5C3H,EAAKiR,cAAcvJ,WACnB1H,EAAK8T,WAAWpM,kBAKtB0M,QAAA,iCACOF,8CACAC,oCAKPrQ,WAAA,SAAWxB,EAAgCC,OAClCO,EAAWF,EAAgBN,EAAMC,aACxCO,EAAQI,UAAW,EACZ7C,KAAKyT,WAAWnD,QAAQ7N,GAASxC,UAG1C+T,WAAA,SAAWvR,UACFzC,KAAK4Q,cAAcN,aAAa7N,GAASI,UAAU,KAAQ5C,UAGpEgU,aAAA,SACE5R,EACAI,yBAEOzC,KAAKyT,WAAWjG,KAAYnL,EAAUI,WAAtCyR,EAAgDpQ,MAAMuI,QAK/D8H,eAAA,SACEC,UAEOpU,KAAKqU,gBACT/D,QAAQ8D,GACRE,KAAI,kBAEI,GAFDjS,WAAUyB,MACGuI,YAKzBkI,aAAA,SACElS,EACA8J,EACAhJ,OAEMqR,EAAgBxS,EAAeK,GAC/BoS,EAAmBzU,KAAKgQ,oBAAoBwE,UAC3CxU,KAAKyT,WACT5D,MAAM7P,KAAMyU,GACZvI,QAAQC,EAAShJ,MAetBuR,eAAA,SACEN,EACAjI,EACAhJ,qBAEO6G,EAAcK,OAAM,kBACzBK,EAAK2J,gBACF/D,QAAQ8D,GACRE,KAAI,gBAAGjS,IAAAA,eAAe,CACrBA,EACAqI,EAAK6J,aAAoBlS,EAAU8J,EAAShJ,aAKpDwR,cAAA,SACEtS,EACAI,yBAEOzC,KAAKyT,WAAWjG,KAAoBnL,EAAUI,WAA9CmS,EAAwD9Q,SAKjE+Q,cAAA,SAAc5S,EAAgCC,OACrCO,EAAWF,EAAgBN,EAAMC,MAClCuR,EAAazT,KAAKyT,WACxBzJ,EAAcK,OAAM,WAClBoJ,EAAWnD,QAAQ7N,GAASiE,SAAQ,SAAAhE,GAClC+Q,EAAWxH,OAAOvJ,YAcxBoS,aAAA,SACE7S,EACAC,EACAC,gBAE2BI,EAAgBN,EAAMC,EAAMC,GAAhDM,OAASU,OACVsQ,EAAazT,KAAKyT,WAElBsB,OACDtS,GACHE,QAAQ,WAGHqH,EAAcK,OAAM,kBACzBoJ,EAAWnD,QAAQ7N,GAASiE,SAAQ,SAAAhE,GAClCA,EAAMwK,WAEDvC,EAAKqK,eAAeD,EAAgB5R,SAU/C8R,cAAA,SACEhT,EACAC,EACAC,gBAEsCI,EAAgBN,EAAMC,EAAMC,GAA3DM,cAASgG,aAAgB,UAEI,IAAzBA,EAAcV,SACvBU,EAAcV,QAAS,OAGnBmN,EAAWlL,EAAcK,OAAM,kBACnCmG,EAAKiD,WAAWnD,QAAQ7N,GAAS6R,KAAI,SAAA5R,UAASA,EAAMmF,OAAOY,gBAGtD7C,QAAQuP,IAAID,GAAUpP,KAAKhF,GAAMiF,MAAMjF,MAYhDsU,kBAAA,SACEnT,EACAC,EACAC,sBAE2BI,EAAgBN,EAAMC,EAAMC,GAAhDM,OAASU,OAEV4R,OACDtS,GAGHE,yBAAQF,EAAQ4S,iBAAiB5S,EAAQE,WACzCG,kBAAUL,EAAQ6S,6BAGbtL,EAAcK,OAAM,kBACzBoG,EAAKgD,WAAWnD,QAAQ7N,GAASiE,SAAQ,SAAAhE,GACvCA,EAAMsL,gBAEDyC,EAAKuE,eAAeD,EAAgB5R,SAa/C6R,eAAA,SACE/S,EACAC,EACAC,gBAE2BI,EAAgBN,EAAMC,EAAMC,GAAhDM,OAASU,OAEV+R,EAAWlL,EAAcK,OAAM,kBACnCkL,EAAK9B,WAAWnD,QAAQ7N,GAAS6R,KAAI,SAAA5R,UACnCA,EAAMuL,WAAMpH,EAAW,CACrBiI,KAAM,CAAE8C,kBAAanP,SAAAA,EAASmP,qBAKhC9I,EAAUlD,QAAQuP,IAAID,GAAUpP,KAAKhF,gBAEpCqC,SAAAA,EAASqS,gBACZ1M,EAAUA,EAAQ/C,MAAMjF,IAGnBgI,KA8BT2M,WAAA,SAMExT,EACAC,EAGAC,OAEMqS,EAAgBxS,EAAeC,EAAMC,EAAMC,GAC3CsS,EAAmBzU,KAAKgQ,oBAAoBwE,QAGZ,IAA3BC,EAAiBjL,QAC1BiL,EAAiBjL,OAAQ,OAGrB9G,EAAQ1C,KAAKyT,WAAW5D,MAAM7P,KAAMyU,UAEnC/R,EAAM6K,cAAckH,EAAiB9S,WACxCe,EAAMuL,MAAMwG,GACZ7O,QAAQC,QAAQnD,EAAMoB,MAAMuI,SA8BlCqJ,cAAA,SAMEzT,EACAC,EAGAC,UAEOnC,KAAKyV,WAAWxT,EAAaC,EAAaC,GAC9C2D,KAAKhF,GACLiF,MAAMjF,MA8BX6U,mBAAA,SAME1T,EAGAC,EAGAC,OAEMqS,EAAgBxS,EAAeC,EAAMC,EAAMC,UACjDqS,EAAchG,SAAWmD,IAKlB3R,KAAKyV,WAAWjB,MA8BzBoB,sBAAA,SAME3T,EAGAC,EAGAC,UAEOnC,KAAK2V,mBAAmB1T,EAAaC,EAAaC,GACtD2D,KAAKhF,GACLiF,MAAMjF,MAGX+U,gBAAA,sBACQX,EAAWlL,EAAcK,OAAM,kBACnCyL,EAAKlF,cAAcP,SAASiE,KAAI,SAAA3Q,UAAYA,EAASkE,sBAEhDjC,QAAQuP,IAAID,GAAUpP,KAAKhF,GAAMiF,MAAMjF,MAGhD2Q,sBAAA,kBACSzR,KAAK+V,mBAAmBtE,2BAGjCR,gBAAA,SAME9N,UAEOnD,KAAK4Q,cAAcf,MAAM7P,KAAMmD,GAAS0N,aAGjDwD,cAAA,kBACSrU,KAAKyT,cAGdsC,iBAAA,kBACS/V,KAAK4Q,iBAGdoF,kBAAA,kBACShW,KAAKoL,kBAGdQ,kBAAA,SAAkBzI,QACXiI,eAAiBjI,KAGxB8S,iBAAA,SACE5T,EACAc,OAEMuB,EAAS1E,KAAK0T,cAAclG,MAChC,SAAA3N,UAAKgE,EAAaxB,KAAcwB,EAAahE,EAAEwC,aAE7CqC,EACFA,EAAO0G,eAAiBjI,OAEnBuQ,cAAcjU,KAAK,CAAE4C,SAAAA,EAAU+I,eAAgBjI,OAIxD8M,iBAAA,SACE5N,gBAEOA,WACHrC,KAAK0T,cAAclG,MAAK,SAAA3N,UAAKuD,EAAgBf,EAAUxC,EAAEwC,qBAAzD6T,EACI9K,oBACJvE,KAGNsP,oBAAA,SACEvS,EACAT,OAEMuB,EAAS1E,KAAK2T,iBAAiBnG,MACnC,SAAA3N,UAAKgE,EAAaD,KAAiBC,EAAahE,EAAE+D,gBAEhDc,EACFA,EAAO0G,eAAiBjI,OAEnBwQ,iBAAiBlU,KAAK,CAAEmE,YAAAA,EAAawH,eAAgBjI,OAI9DqO,oBAAA,SACE5N,gBAEOA,WACH5D,KAAK2T,iBAAiBnG,MAAK,SAAA3N,UACzBuD,EAAgBQ,EAAa/D,EAAE+D,wBADjCwS,EAEGhL,oBACHvE,KAGNmJ,oBAAA,SAOE7M,YAQIA,SAAAA,EAASkT,kBACJlT,MAGHsR,OACDzU,KAAKoL,eAAeuE,QACpB3P,KAAKiQ,uBAAiB9M,SAAAA,EAASd,UAC/Bc,GACHkT,YAAY,WAST5B,EAAiBxR,WAAawR,EAAiBpS,WAClDoS,EAAiBxR,UAAYC,EAC3BuR,EAAiBpS,SACjBoS,IAIGA,KAGT6B,4BAAA,SAOEnT,UAQOnD,KAAKgQ,oBAAoB7M,MAGlCoO,uBAAA,SACEpO,gBAEIA,SAAAA,EAASkT,YACJlT,OAGJnD,KAAKoL,eAAekG,UACpBtR,KAAKwR,0BAAoBrO,SAAAA,EAASS,aAClCT,GACHkT,YAAY,OAIhBjG,MAAA,gBACOqD,WAAWrD,aACXQ,cAAcR,cC1mBVmG,yBAkCTzG,EACA3M,sCAUK2M,OAASA,IACT3M,QAAUA,IACVqT,aAAe,KACfC,oBAAsB,OACtBC,gBACArL,WAAWlI,uCAGRuT,YAAV,gBACOzK,OAASjM,KAAKiM,OAAO0K,KAAK3W,WAC1B0N,QAAU1N,KAAK0N,QAAQiJ,KAAK3W,SAGzBN,YAAV,WACgC,IAA1BM,KAAKX,UAAUY,cACZ2W,aAAahJ,YAAY5N,MAE1B6W,EAAmB7W,KAAK4W,aAAc5W,KAAKmD,eACxC2T,oBAGFC,mBAICjX,cAAV,WACOE,KAAKX,UAAUY,aACbgN,aAITU,uBAAA,kBA8mBAjL,EA7mBgC1C,KAAK4W,cAinBf,KAHtBzT,EA9mBmDnD,KAAKmD,SAinB9CiK,UACwB,WAA/BjK,EAAQ6T,qBACyB,IAA/B7T,EAAQ6T,oBAAgCxT,EAAQd,EAAOS,IAP9D,IACET,EACAS,KA3mBAsK,yBAAA,kBAqnBA/K,EApnBkC1C,KAAK4W,cAwnBjB,KAHtBzT,EArnBqDnD,KAAKmD,SAwnBhDiK,UAC0B,WAAjCjK,EAAQ8T,uBAC2B,IAAjC9T,EAAQ8T,sBAAkCzT,EAAQd,EAAOS,IAPhE,IACET,EACAS,KAlnBA8J,QAAA,gBACO5N,UAAY,QACZ6X,mBACAN,aAAa9I,eAAe9N,SAGnCqL,WAAA,SACElI,EAOAgU,OAEMC,EAAcpX,KAAKmD,QACnBkU,EAAYrX,KAAK4W,qBAElBzT,QAAUnD,KAAK8P,OAAOwG,4BAA4BnT,QAGrB,IAAzBnD,KAAKmD,QAAQiK,SACY,kBAAzBpN,KAAKmD,QAAQiK,cAEd,IAAIkK,MAAM,oCAIbtX,KAAKmD,QAAQd,gBACXc,QAAQd,SAAW+U,EAAY/U,eAGjCkV,kBAECC,EAAUxX,KAAKD,eAInByX,GACAC,EACEzX,KAAK4W,aACLS,EACArX,KAAKmD,QACLiU,SAGGN,oBAIFY,aAAaP,IAIhBK,GACCxX,KAAK4W,eAAiBS,GACrBrX,KAAKmD,QAAQiK,UAAYgK,EAAYhK,SACrCpN,KAAKmD,QAAQxB,YAAcyV,EAAYzV,gBAEpCgW,sBAKLH,GACCxX,KAAK4W,eAAiBS,GACrBrX,KAAKmD,QAAQiK,UAAYgK,EAAYhK,SACrCpN,KAAKmD,QAAQyU,kBAAoBR,EAAYQ,sBAE1CC,2BAITC,oBAAA,SACE3U,OAQMsR,EAAmBzU,KAAK8P,OAAOwG,4BAA4BnT,GAE3DT,EAAQ1C,KAAK8P,OAChBuE,gBACAxE,MACC7P,KAAK8P,OACL2E,UAQGzU,KAAK+X,aAAarV,EAAO+R,MAGlCnH,iBAAA,kBACStN,KAAKgY,iBAGdC,YAAA,SACEvT,cAEMwT,EAAgB,UAEtBlZ,OAAOuF,KAAKG,GAAQgC,SAAQ,SAAAlG,GAC1BxB,OAAOmZ,eAAeD,EAAe1X,EAAK,CACxC4X,cAAc,EACdC,YAAY,EACZtI,IAAK,eACGuI,EAAW9X,SACZkK,EAAK8L,aAAa1P,SAASwR,IAC9B5N,EAAK8L,aAAa/W,KAAK6Y,GAElB5T,EAAO4T,SAKbJ,KAGTK,cAAA,SACEpV,qBAEO,IAAIyC,SAAQ,SAACC,EAASqD,OACrBsP,EAAc7N,EAAKrL,WAAU,SAAAoF,GAC5BA,EAAOjB,aACV+U,IACI9T,EAAO+T,gBAAWtV,SAAAA,EAASqS,cAC7BtM,EAAOxE,EAAOsB,OAEdH,EAAQnB,aAOlBgU,gBAAA,kBACS1Y,KAAK4W,gBAGd3K,OAAA,gBACO6D,OAAOuE,gBAAgBpI,OAAOjM,KAAK4W,iBAG1ClJ,QAAA,SACEvK,UAEOnD,KAAKiO,WACP9K,GACH2L,KAAM,CAAE8C,kBAAazO,SAAAA,EAASyO,mBAIlC+G,gBAAA,SACExV,cAQMsR,EAAmBzU,KAAK8P,OAAOwG,4BAA4BnT,GAE3DT,EAAQ1C,KAAK8P,OAChBuE,gBACAxE,MACC7P,KAAK8P,OACL2E,UAQG/R,EAAMuL,QAAQnI,MAAK,kBAAM0K,EAAKuH,aAAarV,EAAO+R,SAGjDxG,MAAV,SACEC,qBAEOlO,KAAK8W,aAAa5I,GAAcpI,MAAK,kBAC1C2K,EAAKiH,eACEjH,EAAKuH,oBAIRlB,aAAR,SACE5I,QAGKqJ,kBAGDzO,EAA2C9I,KAAK4W,aAAa3I,MAC/DjO,KAAKmD,QACL+K,gBAGGA,SAAAA,EAAcsH,gBACjB1M,EAAUA,EAAQ/C,MAAMjF,IAGnBgI,KAGD6O,mBAAR,8BACOiB,qBAGHhY,IACAZ,KAAKgY,cAAcxU,SAClBzC,EAAef,KAAKmD,QAAQxB,gBAYzB4H,EAPO9H,EACXzB,KAAKgY,cAAcnL,cACnB7M,KAAKmD,QAAQxB,WAKQ,OAElBkX,eAAiB5S,YAAW,WAC1BsP,EAAKyC,cAAcxU,SACtB+R,EAAKmC,iBAENnO,OAGGsO,sBAAR,2BACOiB,wBAGHlY,IACyB,IAAzBZ,KAAKmD,QAAQiK,SACZrM,EAAef,KAAKmD,QAAQyU,wBAK1BmB,kBAAoBC,aAAY,YAEjClD,EAAK3S,QAAQ8V,6BACb/S,EAAaS,cAEbmP,EAAKgB,iBAEN9W,KAAKmD,QAAQyU,qBAGVb,aAAR,gBACOY,0BACAE,2BAGCX,YAAR,gBACO0B,yBACAE,0BAGCF,kBAAR,WACE5M,aAAahM,KAAK6Y,qBACbA,oBAAiBhS,KAGhBiS,qBAAR,WACEI,cAAclZ,KAAK+Y,wBACdA,uBAAoBlS,KAGjBkR,aAAV,SACErV,EACAS,OAyBIkJ,EAjBEgL,EAAYrX,KAAK4W,aACjBQ,EAAcpX,KAAKmD,QACnBgW,EAAanZ,KAAKgY,cAClBoB,EAAkBpZ,KAAKqZ,mBACvBC,EAAoBtZ,KAAKuZ,qBACzBC,EAAc9W,IAAU2U,EACxBoC,EAAoBD,EACtB9W,EAAMoB,MACN9D,KAAK0Z,yBACHC,EAAkBH,EACpBxZ,KAAKgY,cACLhY,KAAK4Z,oBAED9V,EAAUpB,EAAVoB,MACF+I,EAA6D/I,EAA7D+I,cAAe7G,EAA8ClC,EAA9CkC,MAAOwJ,EAAuC1L,EAAvC0L,eAAgB/L,EAAuBK,EAAvBL,WAAYM,EAAWD,EAAXC,OACpD8V,GAAiB,EACjBC,GAAoB,KAIpB3W,EAAQ4W,kBAAmB,KACvBvC,EAAUxX,KAAKD,eAEfia,GAAgBxC,GAAWX,EAAmBnU,EAAOS,GAErD8W,EACJzC,GAAWC,EAAsB/U,EAAO2U,EAAWlU,EAASiU,IAE1D4C,GAAgBC,KAClBxW,GAAa,EACRoJ,IACH9I,EAAS,eAObZ,EAAQ+W,mBACPpW,EAAMwL,wBACPqK,SAAAA,EAAiBQ,YACN,UAAXpW,EAEAsI,EAAOsN,EAAgBtN,KACvBQ,EAAgB8M,EAAgB9M,cAChC9I,EAAS4V,EAAgB5V,OACzB8V,GAAiB,OAGd,GAAI1W,EAAQiX,aAAgC,IAAftW,EAAMuI,QAGpC8M,GACArV,EAAMuI,cAAS+M,SAAAA,EAAiB/M,OAChClJ,EAAQiX,gBAAWd,SAAAA,EAAmBc,UACrCpa,KAAKyW,oBAENpK,EAAO8M,EAAW9M,cAGhBA,EAAOlJ,EAAQiX,OAAOtW,EAAMuI,OACM,IAA9BlJ,EAAQuJ,oBACVL,EAAOtH,QAAiBoU,SAAAA,EAAY9M,KAAMA,SAEvCoK,oBAAsB,KAC3B,MAAO4D,GACPnP,IAAYlF,MAAMqU,GAClBrU,EAAQqU,OACH5D,oBAAsB4D,EAC3B7K,EAAiB1N,KAAKC,MACtBgC,EAAS,aAMbsI,EAAQvI,EAAMuI,aAKqB,IAA5BlJ,EAAQmX,sBACC,IAATjO,IACK,YAAXtI,GAAmC,SAAXA,GACzB,KACIuW,YAIFnB,SAAAA,EAAYW,oBACZ3W,EAAQmX,yBAAoBhB,SAAAA,EAAmBgB,iBAE/CA,EAAkBnB,EAAW9M,aAE7BiO,EACqC,mBAA5BnX,EAAQmX,gBACVnX,EAAQmX,kBACTnX,EAAQmX,gBACVnX,EAAQiX,aAAqC,IAApBE,MAEzBA,EAAkBnX,EAAQiX,OAAOE,IACC,IAA9BnX,EAAQuJ,oBACV4N,EAAkBvV,QAChBoU,SAAAA,EAAY9M,KACZiO,SAGC7D,oBAAsB,KAC3B,MAAO4D,GACPnP,IAAYlF,MAAMqU,GAClBrU,EAAQqU,OACH5D,oBAAsB4D,EAC3B7K,EAAiB1N,KAAKC,MACtBgC,EAAS,aAKgB,IAApBuW,IACTvW,EAAS,UACTsI,EAAOiO,EACPR,GAAoB,SAI+B,CACrD/V,OAAAA,EACAwW,UAAsB,YAAXxW,EACXoW,UAAsB,YAAXpW,EACX0U,QAAoB,UAAX1U,EACTyW,OAAmB,SAAXzW,EACRsI,KAAAA,EACAQ,cAAAA,EACA7G,MAAAA,EACAwJ,eAAAA,EACA9H,aAAc5D,EAAM2L,kBACpBgL,UAAW3W,EAAMwL,gBAAkB,GAAKxL,EAAMyL,iBAAmB,EACjEmL,oBACE5W,EAAMwL,gBAAkBmK,EAAkBnK,iBAC1CxL,EAAMyL,iBAAmBkK,EAAkBlK,iBAC7C9L,WAAAA,EACAkX,aAAclX,GAAyB,YAAXM,EAC5B6W,eAA2B,UAAX7W,GAA8C,IAAxBD,EAAM+I,cAC5CiN,kBAAAA,EACAD,eAAAA,EACAgB,eAA2B,UAAX9W,GAA8C,IAAxBD,EAAM+I,cAC5CrJ,QAASA,EAAQd,EAAOS,GACxBuK,QAAS1N,KAAK0N,QACdzB,OAAQjM,KAAKiM,WAMT6O,sBAAR,SACEpW,EACAyU,OAEKA,SACI,KAGLzU,IAAWyU,SACN,QAGsDnZ,KAAKmD,QAA5D4X,IAAAA,oBAAqBC,IAAAA,kCAExBD,IAAwBC,SACpB,KAGmB,YAAxBD,IAAsC/a,KAAKwW,aAAavW,cACnD,MAGHgb,EACoB,YAAxBF,EACI/a,KAAKwW,aACLuE,SAEC/b,OAAOuF,KAAKG,GAAQI,MAAK,SAAAtE,OACxB8X,EAAW9X,EACX0a,EAAUxW,EAAO4T,KAAca,EAAWb,GAC1C6C,QAAaF,SAAAA,EAAenW,MAAK,SAAAjF,UAAKA,IAAMW,KAC5C4a,QAAaJ,SAAAA,EAA+BlW,MAAK,SAAAjF,UAAKA,IAAMW,YAC3D0a,IAAYE,KAAgBH,GAAiBE,SAIxDzD,aAAA,SAAaP,OACLgC,EAAanZ,KAAKgY,sBAInBA,cAAgBhY,KAAK+X,aAAa/X,KAAK4W,aAAc5W,KAAKmD,cAC1DkW,mBAAqBrZ,KAAK4W,aAAa9S,WACvCyV,qBAAuBvZ,KAAKmD,SZ9O9B,SAAgCwB,EAAMC,MACtCD,IAAMC,GAAOA,IAAMD,SACf,MAGJ,IAAMnE,KAAOmE,KACZA,EAAEnE,KAASoE,EAAEpE,UACR,SAIJ,EYsOD6a,CAAoBrb,KAAKgY,cAAemB,QAKtCmC,EAAsC,CAAE/P,OAAO,IAGtB,WAA7B4L,SAAAA,EAAe9X,YACfW,KAAK8a,sBAAsB9a,KAAKgY,cAAemB,KAE/CmC,EAAqBjc,WAAY,QAG9BwO,YAAYyN,EAAyBnE,QAGpCI,YAAR,eACQ7U,EAAQ1C,KAAK8P,OAChBuE,gBACAxE,MACC7P,KAAK8P,OACL9P,KAAKmD,YAQLT,IAAU1C,KAAK4W,kBAIbS,EAAYrX,KAAK4W,kBAClBA,aAAelU,OACfgX,yBAA2BhX,EAAMoB,WACjC8V,oBAAsB5Z,KAAKgY,cAE5BhY,KAAKD,uBACPsX,GAAAA,EAAWvJ,eAAe9N,MAC1B0C,EAAMkL,YAAY5N,WAItBkP,cAAA,SAAcF,OACNmI,EAA+B,GAEjB,YAAhBnI,EAAOpC,KACTuK,EAAclO,WAAY,EACD,UAAhB+F,EAAOpC,MAAqB3E,EAAiB+G,EAAOhJ,SAC7DmR,EAAchO,SAAU,QAGrBuO,aAAaP,GAEdnX,KAAKD,qBACFgX,kBAIDlJ,OAAR,SAAesJ,cACbnN,EAAcK,OAAM,WAEd8M,EAAclO,iBAChBsS,EAAKpY,QAAQ8F,WAAbsS,EAAKpY,QAAQ8F,UAAYsS,EAAKvD,cAAc3L,YAC5CkP,EAAKpY,QAAQ+N,WAAbqK,EAAKpY,QAAQ+N,UAAYqK,EAAKvD,cAAc3L,KAAO,OAC1C8K,EAAchO,gBACvBoS,EAAKpY,QAAQgG,SAAboS,EAAKpY,QAAQgG,QAAUoS,EAAKvD,cAAchS,aAC1CuV,EAAKpY,QAAQ+N,WAAbqK,EAAKpY,QAAQ+N,eAAYrK,EAAW0U,EAAKvD,cAAchS,QAIrDmR,EAAc9X,WAChBkc,EAAKlc,UAAUqH,SAAQ,SAAAnH,GACrBA,EAASgc,EAAKvD,kBAKdb,EAAc5L,OAChBgQ,EAAKzL,OACFuE,gBACAxG,OAAO,CAAEnL,MAAO6Y,EAAK3E,aAAchK,KAAM,kCA7oB1CxN,GA0qBV,SAASyX,EACPnU,EACAS,UAzBF,SACET,EACAS,YAGsB,IAApBA,EAAQiK,SACP1K,EAAMoB,MAAM+I,eACY,UAAvBnK,EAAMoB,MAAMC,SAA+C,IAAzBZ,EAAQqY,cAqB5CC,CAAkB/Y,EAAOS,IAjB7B,SACET,EACAS,UAGsB,IAApBA,EAAQiK,SACR1K,EAAMoB,MAAM+I,cAAgB,IACA,WAA3B1J,EAAQuY,iBACqB,IAA3BvY,EAAQuY,gBAA4BlY,EAAQd,EAAOS,IASjBwY,CAAqBjZ,EAAOS,GA0BrE,SAASsU,EACP/U,EACA2U,EACAlU,EACAiU,UAGsB,IAApBjU,EAAQiK,UACP1K,IAAU2U,IAAqC,IAAxBD,EAAYhK,YAClCjK,EAAQyY,UACe,UAAvBlZ,EAAMoB,MAAMC,SACY,IAAxBqT,EAAYhK,UACd5J,EAAQd,EAAOS,GAInB,SAASK,EACPd,EACAS,UAEOT,EAAM6K,cAAcpK,EAAQxB,eCpwBxBka,yBAOC/L,EAAqBH,sCAG1BG,OAASA,IACTH,QAAU,KACVjL,OAAS,KACT4G,UAAY,KACZwQ,aAAe,GAEhBnM,KACGoM,WAAWpM,uCAIVjQ,YAAV,sBACgC,IAA1BM,KAAKX,UAAUY,aACZqL,UAAU5E,SAAQ,SAAAyG,GACrBA,EAAS7N,WAAU,SAAAoF,GACjBgG,EAAKsR,SAAS7O,EAAUzI,YAMtB5E,cAAV,WACOE,KAAKX,UAAUY,aACbgN,aAITA,QAAA,gBACO5N,UAAY,QACZiM,UAAU5E,SAAQ,SAAAyG,GACrBA,EAASF,gBAIb8O,WAAA,SACEpM,EACAwH,QAEKxH,QAAUA,OACVsM,gBAAgB9E,MAGvB7J,iBAAA,kBACStN,KAAK0E,UAGdoT,oBAAA,SAAoBnI,qBACXA,EAAQ2E,KAAI,SAACnR,EAAS+Y,OACrBzH,EAAmB9J,EAAKmF,OAAOwG,4BAA4BnT,UAC1DwH,EAAKwR,YAAY1H,EAAkByH,GAAOpE,oBAC/CrD,SAKE0H,YAAR,SACEhZ,EACA+Y,SAEMzH,EAAmBzU,KAAK8P,OAAOwG,4BAA4BnT,GAC7DiZ,EAAkBpc,KAAK8b,aAAarH,EAAiBxR,kBACpDmZ,GAAmB3H,EAAiByF,mBACvCkC,EAAkBpc,KAAKsL,UAAU4Q,aAE5BE,KAAmB,IAAI7F,EAAcvW,KAAK8P,OAAQ2E,MAGnDwH,gBAAR,SAAwB9E,cACtBnN,EAAcK,OAAM,eACdgS,GAAiB,EAEfC,EAAgB9L,EAAKlF,UACrBiR,EAAmB/L,EAAKsL,aAExBU,EAAmC,GACnCC,EAAgC,GAChCC,EAAiD,GAEvDlM,EAAKb,QAAQjJ,SAAQ,SAACvD,EAAS9C,OACvBoU,EAAmBjE,EAAKV,OAAOwG,4BACnCnT,GAEIF,EAAYwR,EAAiBxR,UAC7BkK,EAAWqD,EAAK2L,YAAY1H,EAAkBpU,IAEhDkc,EAAiBtZ,IAAcwR,EAAiByF,mBAClD/M,EAAS9B,WAAWoJ,EAAkB0C,GAGpChK,IAAamP,EAAcjc,KAC7Bgc,GAAiB,GAGnBI,EAAahd,KAAK0N,GAClBqP,EAAU/c,KAAK0N,EAASG,oBACxBoP,EAAgBzZ,GAAakK,MAG3BmP,EAAcrc,SAAWwc,EAAaxc,QAAWoc,KAIrD7L,EAAKlF,UAAYmR,EACjBjM,EAAKsL,aAAeY,EACpBlM,EAAK9L,OAAS8X,EAEThM,EAAKzQ,iBAIVsB,EAAWib,EAAeG,GAAc/V,SAAQ,SAAAyG,GAC9CA,EAASF,aAGX5L,EAAWob,EAAcH,GAAe5V,SAAQ,SAAAyG,GAC9CA,EAAS7N,WAAU,SAAAoF,GACjB8L,EAAKwL,SAAS7O,EAAUzI,SAI5B8L,EAAK3C,iBAIDmO,SAAR,SAAiB7O,EAAyBzI,OAClCwX,EAAQlc,KAAKsL,UAAU9J,QAAQ2L,IACtB,IAAX+O,SACGxX,ObzCJ,SAAsBM,EAAYkX,EAAelb,OAChDoE,EAAOJ,EAAM2X,MAAM,UACzBvX,EAAK8W,GAASlb,EACPoE,EasCWwX,CAAU5c,KAAK0E,OAAQwX,EAAOxX,QACvCmJ,aAIDA,OAAR,sBACE7D,EAAcK,OAAM,WAClBoG,EAAKpR,UAAUqH,SAAQ,SAAAnH,GACrBA,EAASkR,EAAK/L,kBAjJetF,GCWxByd,yBA0BT/M,EACA3M,UAOA2Z,YAAMhN,EAAQ3M,2CAGNuT,YAAV,uBACQA,4BACDqG,cAAgB/c,KAAK+c,cAAcpG,KAAK3W,WACxCgd,kBAAoBhd,KAAKgd,kBAAkBrG,KAAK3W,SAGvDqL,WAAA,SACElI,eAOMkI,0BACDlI,GACHqL,SAAUmD,UAIdmG,oBAAA,SACE3U,UAOAA,EAAQqL,SAAWmD,gBACNmG,8BAAoB3U,MAMnC4Z,cAAA,SACE5Z,UAEOnD,KAAKiO,MAAM,CAChBE,eAAe,EACfqH,mBAAcrS,SAAAA,EAASqS,aACvB1G,KAAM,CACJ+C,UAAW,CAAEI,UAAW,UAAW5D,gBAAWlL,SAAAA,EAASkL,iBAK7D2O,kBAAA,SACE7Z,UAEOnD,KAAKiO,MAAM,CAChBE,eAAe,EACfqH,mBAAcrS,SAAAA,EAASqS,aACvB1G,KAAM,CACJ+C,UAAW,CAAEI,UAAW,WAAY5D,gBAAWlL,SAAAA,EAASkL,iBAKpD0J,aAAV,SACErV,EACAS,mBAOQW,EAAUpB,EAAVoB,8BACaiU,uBAAarV,EAAOS,IAGvC4Z,cAAe/c,KAAK+c,cACpBC,kBAAmBhd,KAAKgd,kBACxB5J,YAAaA,EAAYjQ,WAASW,EAAMuI,aAAN4Q,EAAY7K,OAC9CkB,gBAAiBA,EAAgBnQ,WAASW,EAAMuI,aAAN6Q,EAAY9K,OACtDJ,mBACElO,EAAML,YAAwD,sBAA1CK,EAAM8K,uBAAWiD,oBAAWI,WAClDC,uBACEpO,EAAML,YACoC,uBAA1CK,EAAM8K,uBAAWiD,oBAAWI,iBAhH1BsE,GCAG4G,yBAqBTrN,EACA3M,sCAIK2M,OAASA,IACTzE,WAAWlI,KACXuT,gBACAgB,mDAGGhB,YAAV,gBACO0G,OAASpd,KAAKod,OAAOzG,KAAK3W,WAC1BkN,MAAQlN,KAAKkN,MAAMyJ,KAAK3W,SAG/BqL,WAAA,SACElI,QAEKA,QAAUnD,KAAK8P,OAAOyB,uBAAuBpO,MAG1CrD,cAAV,iBACOE,KAAKX,UAAUY,uBACbod,oBAAiBvP,eAAe9N,UAIzCoR,iBAAA,SAAiBpC,QACV0I,mBAGCP,EAA+B,CACnC9X,WAAW,GAGO,YAAhB2P,EAAOpC,KACTuK,EAAclO,WAAY,EACD,UAAhB+F,EAAOpC,OAChBuK,EAAchO,SAAU,QAGrB0E,OAAOsJ,MAGd7J,iBAAA,kBAMStN,KAAKgY,iBAGd9K,MAAA,gBACOmQ,qBAAkBxW,OAClB6Q,oBACA7J,OAAO,CAAExO,WAAW,OAG3B+d,OAAA,SACErM,EACA5N,eAEKma,cAAgBna,EAEjBnD,KAAKqd,sBACFA,gBAAgBvP,eAAe9N,WAGjCqd,gBAAkBrd,KAAK8P,OAAOiG,mBAAmBlG,MAAM7P,KAAK8P,YAC5D9P,KAAKmD,SACR4N,eACuB,IAAdA,EAA4BA,EAAY/Q,KAAKmD,QAAQ4N,kBAG3DsM,gBAAgBzP,YAAY5N,MAE1BA,KAAKqd,gBAAgBxM,aAGtB6G,aAAR,eACQ5T,EAAQ9D,KAAKqd,gBACfrd,KAAKqd,gBAAgBvZ,MPqIpB,CACLwK,aAASzH,EACTwF,UAAMxF,EACNb,MAAO,KACP0B,aAAc,EACdiB,UAAU,EACV5E,OAAQ,OACRgN,eAAWlK,GOzILnC,OAMDZ,GACHyW,UAA4B,YAAjBzW,EAAMC,OACjBoW,UAA4B,YAAjBrW,EAAMC,OACjB0U,QAA0B,UAAjB3U,EAAMC,OACfyW,OAAyB,SAAjB1W,EAAMC,OACdqZ,OAAQpd,KAAKod,OACblQ,MAAOlN,KAAKkN,aAGT8K,cAAgBtT,KAQfmJ,OAAR,SAAe1K,cACb6G,EAAcK,OAAM,WAEdK,EAAK4S,gBACHna,EAAQ8F,iBACVyB,EAAK4S,cAAcrU,WAAnByB,EAAK4S,cAAcrU,UACjByB,EAAKsN,cAAc3L,KACnB3B,EAAKsN,cAAcjH,UACnBrG,EAAKsN,cAAc1J,eAErB5D,EAAK4S,cAAcpM,WAAnBxG,EAAK4S,cAAcpM,UACjBxG,EAAKsN,cAAc3L,KACnB,KACA3B,EAAKsN,cAAcjH,UACnBrG,EAAKsN,cAAc1J,UAEZnL,EAAQgG,gBACjBuB,EAAK4S,cAAcnU,SAAnBuB,EAAK4S,cAAcnU,QACjBuB,EAAKsN,cAAchS,MACnB0E,EAAKsN,cAAcjH,UACnBrG,EAAKsN,cAAc1J,eAErB5D,EAAK4S,cAAcpM,WAAnBxG,EAAK4S,cAAcpM,eACjBrK,EACA6D,EAAKsN,cAAchS,MACnB0E,EAAKsN,cAAcjH,UACnBrG,EAAKsN,cAAc1J,WAMrBnL,EAAQ9D,WACVqL,EAAKrL,UAAUqH,SAAQ,SAAAnH,GACrBA,EAASmL,EAAKsN,yBA/Jd5Y,GCqCV,SAASme,EAA+B5Z,UAC/BA,EAASG,MAAM6E,SAGxB,SAAS6U,EAA4B9a,SACL,YAAvBA,EAAMoB,MAAMC,4KAGd,SACL+L,EACA3M,WAIMmO,EAAkC,GAClC3B,EAA6B,OAEC,cALpCxM,EAAUA,GAAW,aAKRsa,oBAA8B,KACnCC,EACJva,EAAQua,yBAA2BH,EAErCzN,EACGiG,mBACA1F,SACA3J,SAAQ,SAAA/C,GACH+Z,EAAwB/Z,IAC1B2N,EAAU7R,KA7CpB,SAA2BkE,SAClB,CACLC,YAAaD,EAASR,QAAQS,YAC9BE,MAAOH,EAASG,OA0CK6Z,CAAkBha,WAKP,cAA9BR,YAASya,kBAA4B,KACjCC,EACJ1a,EAAQ0a,sBAAwBL,EAElC1N,EACGuE,gBACAhE,SACA3J,SAAQ,SAAAhE,GACHmb,EAAqBnb,IACvBiN,EAAQlQ,KAhDlB,SAAwBiD,SACf,CACLoB,MAAOpB,EAAMoB,MACbzB,SAAUK,EAAML,SAChBY,UAAWP,EAAMO,WA4CE6a,CAAepb,aAK7B,CAAE4O,UAAAA,EAAW3B,QAAAA,gDAGf,SACLG,EACAiO,EACA5a,MAE+B,iBAApB4a,GAAoD,OAApBA,OAIrCnN,EAAgBd,EAAOiG,mBACvBtC,EAAa3D,EAAOuE,gBAEpB/C,EAAayM,EAAoCzM,WAAa,GAC9D3B,EAAWoO,EAAoCpO,SAAW,GAEhE2B,EAAU5K,SAAQ,SAAAsX,SAChBpN,EAAcf,MACZC,aAEK3M,YAAAA,EAASiI,uBAAT6S,EAAyB3M,WAC5B1N,YAAaoa,EAAmBpa,cAElCoa,EAAmBla,UAIvB6L,EAAQjJ,SAAQ,SAAAwX,SACRxb,EAAQ+Q,EAAW1D,IAAImO,EAAgBjb,WAGzCP,EACEA,EAAMoB,MAAM+I,cAAgBqR,EAAgBpa,MAAM+I,eACpDnK,EAAMoK,SAASoR,EAAgBpa,OAMnC2P,EAAW5D,MACTC,aAEK3M,YAAAA,EAASiI,uBAAT+S,EAAyBxO,SAC5BtN,SAAU6b,EAAgB7b,SAC1BY,UAAWib,EAAgBjb,YAE7Bib,EAAgBpa,2ChB0Qf,SAAiB9C,UACfA,aAAiBsW,uDKnZnB,SAAmB8G,GACxBtT,EAASsT"}