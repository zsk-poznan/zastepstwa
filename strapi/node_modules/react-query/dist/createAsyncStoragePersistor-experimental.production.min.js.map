{"version":3,"file":"createAsyncStoragePersistor-experimental.production.min.js","sources":["../src/createAsyncStoragePersistor-experimental/index.ts"],"sourcesContent":["import { PersistedClient, Persistor } from '../persistQueryClient-experimental'\n\ninterface AsyncStorage {\n  getItem: (key: string) => Promise<string | null>\n  setItem: (key: string, value: string) => Promise<void>\n  removeItem: (key: string) => Promise<void>\n}\n\ninterface CreateAsyncStoragePersistorOptions {\n  /** The storage client used for setting an retrieving items from cache */\n  storage: AsyncStorage\n  /** The key to use when storing the cache */\n  key?: string\n  /** To avoid spamming,\n   * pass a time in ms to throttle saving the cache to disk */\n  throttleTime?: number\n}\n\nexport const createAsyncStoragePersistor = ({\n  storage,\n  key = `REACT_QUERY_OFFLINE_CACHE`,\n  throttleTime = 1000,\n}: CreateAsyncStoragePersistorOptions): Persistor => {\n  return {\n    persistClient: asyncThrottle(\n      persistedClient => storage.setItem(key, JSON.stringify(persistedClient)),\n      { interval: throttleTime }\n    ),\n    restoreClient: async () => {\n      const cacheString = await storage.getItem(key)\n\n      if (!cacheString) {\n        return\n      }\n\n      return JSON.parse(cacheString) as PersistedClient\n    },\n    removeClient: () => storage.removeItem(key),\n  }\n}\n\nfunction asyncThrottle<T>(\n  func: (...args: ReadonlyArray<unknown>) => Promise<T>,\n  { interval = 1000, limit = 1 }: { interval?: number; limit?: number } = {}\n) {\n  if (typeof func !== 'function') throw new Error('argument is not function.')\n  const running = { current: false }\n  let lastTime = 0\n  let timeout: number\n  const queue: Array<any[]> = []\n  return (...args: any) =>\n    (async () => {\n      if (running.current) {\n        lastTime = Date.now()\n        if (queue.length > limit) {\n          queue.shift()\n        }\n\n        queue.push(args)\n        clearTimeout(timeout)\n      }\n      if (Date.now() - lastTime > interval) {\n        running.current = true\n        await func(...args)\n        lastTime = Date.now()\n        running.current = false\n      } else {\n        if (queue.length > 0) {\n          const lastArgs = queue[queue.length - 1]!\n          timeout = setTimeout(async () => {\n            if (!running.current) {\n              running.current = true\n              await func(...lastArgs)\n              running.current = false\n            }\n          }, interval)\n        }\n      }\n    })()\n}\n"],"names":["value","then","direct","Promise","resolve","f","args","i","arguments","length","apply","this","e","reject","body","result","asyncThrottle","func","interval","limit","Error","timeout","running","current","lastTime","queue","_async","Date","now","shift","push","clearTimeout","lastArgs","setTimeout","storage","key","throttleTime","persistClient","persistedClient","setItem","JSON","stringify","restoreClient","getItem","cacheString","parse","removeClient","removeItem"],"mappings":"+OAoFO,WAAgBA,EAAOC,EAAMC,UAC/BA,EACID,EAAOA,EAAKD,GAASA,GAExBA,GAAUA,EAAMC,OACpBD,EAAQG,QAAQC,QAAQJ,IAElBC,EAAOD,EAAMC,KAAKA,GAAQD,GArB3B,WAAgBK,UACf,eACD,IAAIC,EAAO,GAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAChDD,EAAKC,GAAKC,UAAUD,cAGbJ,QAAQC,QAAQC,EAAEK,MAAMC,KAAML,IACpC,MAAMM,UACAT,QAAQU,OAAOD,KAkhBlB,cAtDA,WAAwBE,OAC1BC,EAASD,OACTC,GAAUA,EAAOd,YACbc,EAAOd,QApgBhB,SAASe,EACPC,sBACwE,SAAtEC,SAAAA,aAAW,UAAMC,MAAAA,aAAQ,OAEP,mBAATF,EAAqB,MAAM,IAAIG,MAAM,iCAG5CC,EAFEC,EAAU,CAAEC,SAAS,GACvBC,EAAW,EAETC,EAAsB,UACrB,sCAAInB,2BAAAA,yBACToB,qBACMJ,EAAQC,UACVC,EAAWG,KAAKC,MACZH,EAAMhB,OAASU,GACjBM,EAAMI,QAGRJ,EAAMK,KAAKxB,GACXyB,aAAaV,qBAEXM,KAAKC,MAAQJ,EAAWN,SAC1BI,EAAQC,SAAU,IACZN,eAAQX,eACdkB,EAAWG,KAAKC,MAChBN,EAAQC,SAAU,QAEdE,EAAMhB,OAAS,OACXuB,EAAWP,EAAMA,EAAMhB,OAAS,GACtCY,EAAUY,kDACHX,EAAQC,eACXD,EAAQC,SAAU,IACZN,eAAQe,eACdV,EAAQC,SAAU,WAEnBL,SAxBTQ,kCAjCuC,gBACzCQ,IAAAA,YACAC,IAAAA,+CACAC,mBAEO,CACLC,cAAerB,GACb,SAAAsB,UAAmBJ,EAAQK,QAAQJ,EAAKK,KAAKC,UAAUH,MACvD,CAAEpB,oBALS,QAObwB,qCAC4BR,EAAQS,QAAQR,aAApCS,MAEDA,SAIEJ,KAAKK,MAAMD,SAEpBE,aAAc,kBAAMZ,EAAQa,WAAWZ"}