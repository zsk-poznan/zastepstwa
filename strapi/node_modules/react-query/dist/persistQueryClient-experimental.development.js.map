{"version":3,"file":"persistQueryClient-experimental.development.js","sources":["../src/core/utils.ts","../src/core/logger.ts","../src/persistQueryClient-experimental/index.ts"],"sourcesContent":["import type { Mutation } from './mutation'\nimport type { Query } from './query'\nimport { EnsuredQueryKey } from './types'\nimport type {\n  MutationFunction,\n  MutationKey,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryOptions,\n} from './types'\n\n// TYPES\n\nexport interface QueryFilters {\n  /**\n   * Include or exclude active queries\n   */\n  active?: boolean\n  /**\n   * Match query key exactly\n   */\n  exact?: boolean\n  /**\n   * Include or exclude inactive queries\n   */\n  inactive?: boolean\n  /**\n   * Include queries matching this predicate function\n   */\n  predicate?: (query: Query) => boolean\n  /**\n   * Include queries matching this query key\n   */\n  queryKey?: QueryKey\n  /**\n   * Include or exclude stale queries\n   */\n  stale?: boolean\n  /**\n   * Include or exclude fetching queries\n   */\n  fetching?: boolean\n}\n\nexport interface MutationFilters {\n  /**\n   * Match mutation key exactly\n   */\n  exact?: boolean\n  /**\n   * Include mutations matching this predicate function\n   */\n  predicate?: (mutation: Mutation<any, any, any>) => boolean\n  /**\n   * Include mutations matching this mutation key\n   */\n  mutationKey?: MutationKey\n  /**\n   * Include or exclude fetching mutations\n   */\n  fetching?: boolean\n}\n\nexport type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput\n\nexport type Updater<TInput, TOutput> =\n  | TOutput\n  | DataUpdateFunction<TInput, TOutput>\n\nexport type QueryStatusFilter = 'all' | 'active' | 'inactive' | 'none'\n\n// UTILS\n\nexport const isServer = typeof window === 'undefined'\n\nexport function noop(): undefined {\n  return undefined\n}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<TInput, TOutput>)(input)\n    : updater\n}\n\nexport function isValidTimeout(value: any): value is number {\n  return typeof value === 'number' && value >= 0 && value !== Infinity\n}\n\nexport function ensureQueryKeyArray<T extends QueryKey>(\n  value: T\n): EnsuredQueryKey<T> {\n  return (Array.isArray(value)\n    ? value\n    : ([value] as unknown)) as EnsuredQueryKey<T>\n}\n\nexport function difference<T>(array1: T[], array2: T[]): T[] {\n  return array1.filter(x => array2.indexOf(x) === -1)\n}\n\nexport function replaceAt<T>(array: T[], index: number, value: T): T[] {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\nexport function timeUntilStale(updatedAt: number, staleTime?: number): number {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0)\n}\n\nexport function parseQueryArgs<\n  TOptions extends QueryOptions<any, any, any, TQueryKey>,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  arg1: TQueryKey | TOptions,\n  arg2?: QueryFunction<any, TQueryKey> | TOptions,\n  arg3?: TOptions\n): TOptions {\n  if (!isQueryKey(arg1)) {\n    return arg1 as TOptions\n  }\n\n  if (typeof arg2 === 'function') {\n    return { ...arg3, queryKey: arg1, queryFn: arg2 } as TOptions\n  }\n\n  return { ...arg2, queryKey: arg1 } as TOptions\n}\n\nexport function parseMutationArgs<\n  TOptions extends MutationOptions<any, any, any, any>\n>(\n  arg1: MutationKey | MutationFunction<any, any> | TOptions,\n  arg2?: MutationFunction<any, any> | TOptions,\n  arg3?: TOptions\n): TOptions {\n  if (isQueryKey(arg1)) {\n    if (typeof arg2 === 'function') {\n      return { ...arg3, mutationKey: arg1, mutationFn: arg2 } as TOptions\n    }\n    return { ...arg2, mutationKey: arg1 } as TOptions\n  }\n\n  if (typeof arg1 === 'function') {\n    return { ...arg2, mutationFn: arg1 } as TOptions\n  }\n\n  return { ...arg1 } as TOptions\n}\n\nexport function parseFilterArgs<\n  TFilters extends QueryFilters,\n  TOptions = unknown\n>(\n  arg1?: QueryKey | TFilters,\n  arg2?: TFilters | TOptions,\n  arg3?: TOptions\n): [TFilters, TOptions | undefined] {\n  return (isQueryKey(arg1)\n    ? [{ ...arg2, queryKey: arg1 }, arg3]\n    : [arg1 || {}, arg2]) as [TFilters, TOptions]\n}\n\nexport function parseMutationFilterArgs(\n  arg1?: QueryKey | MutationFilters,\n  arg2?: MutationFilters\n): MutationFilters | undefined {\n  return isQueryKey(arg1) ? { ...arg2, mutationKey: arg1 } : arg1\n}\n\nexport function mapQueryStatusFilter(\n  active?: boolean,\n  inactive?: boolean\n): QueryStatusFilter {\n  if (\n    (active === true && inactive === true) ||\n    (active == null && inactive == null)\n  ) {\n    return 'all'\n  } else if (active === false && inactive === false) {\n    return 'none'\n  } else {\n    // At this point, active|inactive can only be true|false or false|true\n    // so, when only one value is provided, the missing one has to be the negated value\n    const isActive = active ?? !inactive\n    return isActive ? 'active' : 'inactive'\n  }\n}\n\nexport function matchQuery(\n  filters: QueryFilters,\n  query: Query<any, any, any, any>\n): boolean {\n  const {\n    active,\n    exact,\n    fetching,\n    inactive,\n    predicate,\n    queryKey,\n    stale,\n  } = filters\n\n  if (isQueryKey(queryKey)) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false\n    }\n  }\n\n  const queryStatusFilter = mapQueryStatusFilter(active, inactive)\n\n  if (queryStatusFilter === 'none') {\n    return false\n  } else if (queryStatusFilter !== 'all') {\n    const isActive = query.isActive()\n    if (queryStatusFilter === 'active' && !isActive) {\n      return false\n    }\n    if (queryStatusFilter === 'inactive' && isActive) {\n      return false\n    }\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false\n  }\n\n  if (typeof fetching === 'boolean' && query.isFetching() !== fetching) {\n    return false\n  }\n\n  if (predicate && !predicate(query)) {\n    return false\n  }\n\n  return true\n}\n\nexport function matchMutation(\n  filters: MutationFilters,\n  mutation: Mutation<any, any>\n): boolean {\n  const { exact, fetching, predicate, mutationKey } = filters\n  if (isQueryKey(mutationKey)) {\n    if (!mutation.options.mutationKey) {\n      return false\n    }\n    if (exact) {\n      if (\n        hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)\n      ) {\n        return false\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false\n    }\n  }\n\n  if (\n    typeof fetching === 'boolean' &&\n    (mutation.state.status === 'loading') !== fetching\n  ) {\n    return false\n  }\n\n  if (predicate && !predicate(mutation)) {\n    return false\n  }\n\n  return true\n}\n\nexport function hashQueryKeyByOptions<TQueryKey extends QueryKey = QueryKey>(\n  queryKey: TQueryKey,\n  options?: QueryOptions<any, any, any, TQueryKey>\n): string {\n  const hashFn = options?.queryKeyHashFn || hashQueryKey\n  return hashFn(queryKey)\n}\n\n/**\n * Default query keys hash function.\n */\nexport function hashQueryKey(queryKey: QueryKey): string {\n  const asArray = ensureQueryKeyArray(queryKey)\n  return stableValueHash(asArray)\n}\n\n/**\n * Hashes the value into a stable hash.\n */\nexport function stableValueHash(value: any): string {\n  return JSON.stringify(value, (_, val) =>\n    isPlainObject(val)\n      ? Object.keys(val)\n          .sort()\n          .reduce((result, key) => {\n            result[key] = val[key]\n            return result\n          }, {} as any)\n      : val\n  )\n}\n\n/**\n * Checks if key `b` partially matches with key `a`.\n */\nexport function partialMatchKey(a: QueryKey, b: QueryKey): boolean {\n  return partialDeepEqual(ensureQueryKeyArray(a), ensureQueryKeyArray(b))\n}\n\n/**\n * Checks if `b` partially matches with `a`.\n */\nexport function partialDeepEqual(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return !Object.keys(b).some(key => !partialDeepEqual(a[key], b[key]))\n  }\n\n  return false\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = Array.isArray(a) && Array.isArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aSize = array ? a.length : Object.keys(a).length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      copy[key] = replaceEqualDeep(a[key], b[key])\n      if (copy[key] === a[key]) {\n        equalItems++\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\n/**\n * Shallow compare objects. Only works with objects that always have the same properties.\n */\nexport function shallowEqualObjects<T>(a: T, b: T): boolean {\n  if ((a && !b) || (b && !a)) {\n    return false\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nexport function isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function isQueryKey(value: any): value is QueryKey {\n  return typeof value === 'string' || Array.isArray(value)\n}\n\nexport function isError(value: any): value is Error {\n  return value instanceof Error\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout)\n  })\n}\n\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\nexport function scheduleMicrotask(callback: () => void): void {\n  Promise.resolve()\n    .then(callback)\n    .catch(error =>\n      setTimeout(() => {\n        throw error\n      })\n    )\n}\n","import { noop } from './utils'\n\n// TYPES\n\nexport interface Logger {\n  log: LogFunction\n  warn: LogFunction\n  error: LogFunction\n}\n\ntype LogFunction = (...args: any[]) => void\n\n// FUNCTIONS\n\nlet logger: Logger = console || {\n  error: noop,\n  warn: noop,\n  log: noop,\n}\n\nexport function getLogger(): Logger {\n  return logger\n}\n\nexport function setLogger(newLogger: Logger) {\n  logger = newLogger\n}\n","import { QueryClient } from '../core'\nimport { getLogger } from '../core/logger'\nimport {\n  dehydrate,\n  DehydratedState,\n  DehydrateOptions,\n  HydrateOptions,\n  hydrate,\n} from 'react-query'\nimport { Promisable } from 'type-fest'\n\nexport interface Persistor {\n  persistClient(persistClient: PersistedClient): Promisable<void>\n  restoreClient(): Promisable<PersistedClient | undefined>\n  removeClient(): Promisable<void>\n}\n\nexport interface PersistedClient {\n  timestamp: number\n  buster: string\n  clientState: DehydratedState\n}\n\nexport interface PersistQueryClientOptions {\n  /** The QueryClient to persist */\n  queryClient: QueryClient\n  /** The Persistor interface for storing and restoring the cache\n   * to/from a persisted location */\n  persistor: Persistor\n  /** The max-allowed age of the cache.\n   * If a persisted cache is found that is older than this\n   * time, it will be discarded */\n  maxAge?: number\n  /** A unique string that can be used to forcefully\n   * invalidate existing caches if they do not share the same buster string */\n  buster?: string\n  /** The options passed to the hydrate function */\n  hydrateOptions?: HydrateOptions\n  /** The options passed to the dehydrate function */\n  dehydrateOptions?: DehydrateOptions\n}\n\nexport async function persistQueryClient({\n  queryClient,\n  persistor,\n  maxAge = 1000 * 60 * 60 * 24,\n  buster = '',\n  hydrateOptions,\n  dehydrateOptions,\n}: PersistQueryClientOptions) {\n  if (typeof window !== 'undefined') {\n    // Subscribe to changes\n    const saveClient = () => {\n      const persistClient: PersistedClient = {\n        buster,\n        timestamp: Date.now(),\n        clientState: dehydrate(queryClient, dehydrateOptions),\n      }\n\n      persistor.persistClient(persistClient)\n    }\n\n    // Attempt restore\n    try {\n      const persistedClient = await persistor.restoreClient()\n\n      if (persistedClient) {\n        if (persistedClient.timestamp) {\n          const expired = Date.now() - persistedClient.timestamp > maxAge\n          const busted = persistedClient.buster !== buster\n          if (expired || busted) {\n            persistor.removeClient()\n          } else {\n            hydrate(queryClient, persistedClient.clientState, hydrateOptions)\n          }\n        } else {\n          persistor.removeClient()\n        }\n      }\n    } catch (err) {\n      getLogger().error(err)\n      getLogger().warn(\n        'Encountered an error attempting to restore client cache from persisted location. As a precaution, the persisted cache will be discarded.'\n      )\n      persistor.removeClient()\n    }\n\n    // Subscribe to changes in the query cache to trigger the save\n    queryClient.getQueryCache().subscribe(saveClient)\n  }\n}\n"],"names":["noop","undefined","logger","console","error","warn","log","getLogger","value","then","direct","Promise","resolve","body","recover","result","e","f","args","i","arguments","length","apply","reject","persistQueryClient","queryClient","persistor","maxAge","buster","hydrateOptions","dehydrateOptions","window","saveClient","persistClient","timestamp","Date","now","clientState","dehydrate","restoreClient","persistedClient","expired","busted","removeClient","hydrate","err","getQueryCache","subscribe"],"mappings":"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"}